Unity Editor version:    2021.3.0f1 (6eacc8284459)
Branch:                  2021.3/staging
Build type:              Release
Batch mode:              YES
System name:             Linux
Distro version:          #1 SMP PREEMPT Thu, 14 Apr 2022 01:18:36 +0000
Kernel version:          5.17.3-arch1-1
Architecture:            x86_64
Available memory:        15821 MB
Using pre-set license
Pro License: YES

(Unity:864060): Gdk-CRITICAL **: 21:27:35.175: gdk_window_get_cursor: assertion 'GDK_IS_WINDOW (window)' failed
Desktop is 1920 x 1080 @ 60 Hz
Initialize udev device monitor.

COMMAND LINE ARGUMENTS:
Unity
-adb2
-batchMode
-noUpm
-name
AssetImportWorker4
-projectPath
/home/thesynthax/Unity Projects/Unity-Projects/two point five D platformer
-logFile
Logs/AssetImportWorker4.log
-srvPort
43893
Successfully changed project path to: /home/thesynthax/Unity Projects/Unity-Projects/two point five D platformer
/home/thesynthax/Unity Projects/Unity-Projects/two point five D platformer
[UnityMemory] Configuration Parameters - Can be set up in boot.config
    "memorysetup-bucket-allocator-granularity=16"
    "memorysetup-bucket-allocator-bucket-count=8"
    "memorysetup-bucket-allocator-block-size=33554432"
    "memorysetup-bucket-allocator-block-count=8"
    "memorysetup-main-allocator-block-size=16777216"
    "memorysetup-thread-allocator-block-size=16777216"
    "memorysetup-gfx-main-allocator-block-size=16777216"
    "memorysetup-gfx-thread-allocator-block-size=16777216"
    "memorysetup-cache-allocator-block-size=4194304"
    "memorysetup-typetree-allocator-block-size=2097152"
    "memorysetup-profiler-bucket-allocator-granularity=16"
    "memorysetup-profiler-bucket-allocator-bucket-count=8"
    "memorysetup-profiler-bucket-allocator-block-size=33554432"
    "memorysetup-profiler-bucket-allocator-block-count=8"
    "memorysetup-profiler-allocator-block-size=16777216"
    "memorysetup-profiler-editor-allocator-block-size=1048576"
    "memorysetup-temp-allocator-size-main=16777216"
    "memorysetup-job-temp-allocator-block-size=2097152"
    "memorysetup-job-temp-allocator-block-size-background=1048576"
    "memorysetup-job-temp-allocator-reduction-small-platforms=262144"
    "memorysetup-temp-allocator-size-background-worker=32768"
    "memorysetup-temp-allocator-size-job-worker=262144"
    "memorysetup-temp-allocator-size-preload-manager=33554432"
    "memorysetup-temp-allocator-size-nav-mesh-worker=65536"
    "memorysetup-temp-allocator-size-audio-worker=65536"
    "memorysetup-temp-allocator-size-cloud-worker=32768"
    "memorysetup-temp-allocator-size-gi-baking-worker=262144"
    "memorysetup-temp-allocator-size-gfx=262144"
Refreshing native plugins compatible for Editor in 102.16 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Initialize engine version: 2021.3.0f1 (6eacc8284459)
[Subsystems] Discovering subsystems at path /home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/Resources/UnitySubsystems
[Subsystems] Discovering subsystems at path /home/thesynthax/Unity Projects/Unity-Projects/two point five D platformer/Assets
GLX Extensions: GLX_ARB_get_proc_address GLX_ARB_multisample GLX_EXT_visual_info GLX_EXT_visual_rating GLX_EXT_import_context GLX_SGI_video_sync GLX_SGIX_fbconfig GLX_SGIX_pbuffer GLX_SGI_swap_control GLX_EXT_swap_control GLX_EXT_swap_control_tear GLX_EXT_buffer_age GLX_ARB_create_context GLX_ARB_create_context_profile GLX_NV_float_buffer GLX_ARB_fbconfig_float GLX_EXT_texture_from_pixmap GLX_EXT_framebuffer_sRGB GLX_NV_copy_image GLX_EXT_create_context_es_profile GLX_EXT_create_context_es2_profile GLX_ARB_create_context_no_error GLX_ARB_create_context_robustness GLX_NV_delay_before_swap GLX_EXT_stereo_tree GLX_ARB_context_flush_control GLX_NV_robustness_video_memory_purge GLX_NV_multigpu_context 
Renderer: NVIDIA GeForce GTX 1650 with Max-Q Design/PCIe/SSE2
Vendor:   NVIDIA Corporation
Version:  4.5.0 NVIDIA 510.60.02
GLES:     0
 GL_AMD_multi_draw_indirect GL_AMD_seamless_cubemap_per_texture GL_AMD_vertex_shader_viewport_index GL_AMD_vertex_shader_layer GL_ARB_arrays_of_arrays GL_ARB_base_instance GL_ARB_bindless_texture GL_ARB_blend_func_extended GL_ARB_buffer_storage GL_ARB_clear_buffer_object GL_ARB_clear_texture GL_ARB_clip_control GL_ARB_color_buffer_float GL_ARB_compressed_texture_pixel_storage GL_ARB_conservative_depth GL_ARB_compute_shader GL_ARB_compute_variable_group_size GL_ARB_conditional_render_inverted GL_ARB_copy_buffer GL_ARB_copy_image GL_ARB_cull_distance GL_ARB_debug_output GL_ARB_depth_buffer_float GL_ARB_depth_clamp GL_ARB_depth_texture GL_ARB_derivative_control GL_ARB_direct_state_access GL_ARB_draw_buffers GL_ARB_draw_buffers_blend GL_ARB_draw_indirect GL_ARB_draw_elements_base_vertex GL_ARB_draw_instanced GL_ARB_enhanced_layouts GL_ARB_ES2_compatibility GL_ARB_ES3_compatibility GL_ARB_ES3_1_compatibility GL_ARB_ES3_2_compatibility GL_ARB_explicit_attrib_location GL_ARB_explicit_uniform_location GL_ARB_fragmen
t_coord_conventions GL_ARB_fragment_layer_viewport GL_ARB_fragment_program GL_ARB_fragment_program_shadow GL_ARB_fragment_shader GL_ARB_fragment_shader_interlock GL_ARB_framebuffer_no_attachments GL_ARB_framebuffer_object GL_ARB_framebuffer_sRGB GL_ARB_geometry_shader4 GL_ARB_get_program_binary GL_ARB_get_texture_sub_image GL_ARB_gl_spirv GL_ARB_gpu_shader5 GL_ARB_gpu_shader_fp64 GL_ARB_gpu_shader_int64 GL_ARB_half_float_pixel GL_ARB_half_float_vertex GL_ARB_imaging GL_ARB_indirect_parameters GL_ARB_instanced_arrays GL_ARB_internalformat_query GL_ARB_internalformat_query2 GL_ARB_invalidate_subdata GL_ARB_map_buffer_alignment GL_ARB_map_buffer_range GL_ARB_multi_bind GL_ARB_multi_draw_indirect GL_ARB_multisample GL_ARB_multitexture GL_ARB_occlusion_query GL_ARB_occlusion_query2 GL_ARB_parallel_shader_compile GL_ARB_pipeline_statistics_query GL_ARB_pixel_buffer_object GL_ARB_point_parameters GL_ARB_point_sprite GL_ARB_polygon_offset_clamp GL_ARB_post_depth_coverage GL_ARB_program_interface_query GL_ARB_provoki
ng_vertex GL_ARB_query_buffer_object GL_ARB_robust_buffer_access_behavior GL_ARB_robustness GL_ARB_sample_locations GL_ARB_sample_shading GL_ARB_sampler_objects GL_ARB_seamless_cube_map GL_ARB_seamless_cubemap_per_texture GL_ARB_separate_shader_objects GL_ARB_shader_atomic_counter_ops GL_ARB_shader_atomic_counters GL_ARB_shader_ballot GL_ARB_shader_bit_encoding GL_ARB_shader_clock GL_ARB_shader_draw_parameters GL_ARB_shader_group_vote GL_ARB_shader_image_load_store GL_ARB_shader_image_size GL_ARB_shader_objects GL_ARB_shader_precision GL_ARB_shader_storage_buffer_object GL_ARB_shader_subroutine GL_ARB_shader_texture_image_samples GL_ARB_shader_texture_lod GL_ARB_shading_language_100 GL_ARB_shader_viewport_layer_array GL_ARB_shading_language_420pack GL_ARB_shading_language_include GL_ARB_shading_language_packing GL_ARB_shadow GL_ARB_sparse_buffer GL_ARB_sparse_texture GL_ARB_sparse_texture2 GL_ARB_sparse_texture_clamp GL_ARB_spirv_extensions GL_ARB_stencil_texturing GL_ARB_sync GL_ARB_tessellation_shader GL_A
RB_texture_barrier GL_ARB_texture_border_clamp GL_ARB_texture_buffer_object GL_ARB_texture_buffer_object_rgb32 GL_ARB_texture_buffer_range GL_ARB_texture_compression GL_ARB_texture_compression_bptc GL_ARB_texture_compression_rgtc GL_ARB_texture_cube_map GL_ARB_texture_cube_map_array GL_ARB_texture_env_add GL_ARB_texture_env_combine GL_ARB_texture_env_crossbar GL_ARB_texture_env_dot3 GL_ARB_texture_filter_anisotropic GL_ARB_texture_filter_minmax GL_ARB_texture_float GL_ARB_texture_gather GL_ARB_texture_mirror_clamp_to_edge GL_ARB_texture_mirrored_repeat GL_ARB_texture_multisample GL_ARB_texture_non_power_of_two GL_ARB_texture_query_levels GL_ARB_texture_query_lod GL_ARB_texture_rectangle GL_ARB_texture_rg GL_ARB_texture_rgb10_a2ui GL_ARB_texture_stencil8 GL_ARB_texture_storage GL_ARB_texture_storage_multisample GL_ARB_texture_swizzle GL_ARB_texture_view GL_ARB_timer_query GL_ARB_transform_feedback2 GL_ARB_transform_feedback3 GL_ARB_transform_feedback_instanced GL_ARB_transform_feedback_overflow_query GL_ARB_t
ranspose_matrix GL_ARB_uniform_buffer_object GL_ARB_vertex_array_bgra GL_ARB_vertex_array_object GL_ARB_vertex_attrib_64bit GL_ARB_vertex_attrib_binding GL_ARB_vertex_buffer_object GL_ARB_vertex_program GL_ARB_vertex_shader GL_ARB_vertex_type_10f_11f_11f_rev GL_ARB_vertex_type_2_10_10_10_rev GL_ARB_viewport_array GL_ARB_window_pos GL_ATI_draw_buffers GL_ATI_texture_float GL_ATI_texture_mirror_once GL_S3_s3tc GL_EXT_texture_env_add GL_EXT_abgr GL_EXT_bgra GL_EXT_bindable_uniform GL_EXT_blend_color GL_EXT_blend_equation_separate GL_EXT_blend_func_separate GL_EXT_blend_minmax GL_EXT_blend_subtract GL_EXT_compiled_vertex_array GL_EXT_Cg_shader GL_EXT_depth_bounds_test GL_EXT_direct_state_access GL_EXT_draw_buffers2 GL_EXT_draw_instanced GL_EXT_draw_range_elements GL_EXT_fog_coord GL_EXT_framebuffer_blit GL_EXT_framebuffer_multisample GL_EXTX_framebuffer_mixed_formats GL_EXT_framebuffer_multisample_blit_scaled GL_EXT_framebuffer_object GL_EXT_framebuffer_sRGB GL_EXT_geometry_shader4 GL_EXT_gpu_program_parameters 
GL_EXT_gpu_shader4 GL_EXT_multi_draw_arrays GL_EXT_multiview_texture_multisample GL_EXT_multiview_timer_query GL_EXT_packed_depth_stencil GL_EXT_packed_float GL_EXT_packed_pixels GL_EXT_pixel_buffer_object GL_EXT_point_parameters GL_EXT_polygon_offset_clamp GL_EXT_post_depth_coverage GL_EXT_provoking_vertex GL_EXT_raster_multisample GL_EXT_rescale_normal GL_EXT_secondary_color GL_EXT_separate_shader_objects GL_EXT_separate_specular_color GL_EXT_shader_image_load_formatted GL_EXT_shader_image_load_store GL_EXT_shader_integer_mix GL_EXT_shadow_funcs GL_EXT_sparse_texture2 GL_EXT_stencil_two_side GL_EXT_stencil_wrap GL_EXT_texture3D GL_EXT_texture_array GL_EXT_texture_buffer_object GL_EXT_texture_compression_dxt1 GL_EXT_texture_compression_latc GL_EXT_texture_compression_rgtc GL_EXT_texture_compression_s3tc GL_EXT_texture_cube_map GL_EXT_texture_edge_clamp GL_EXT_texture_env_combine GL_EXT_texture_env_dot3 GL_EXT_texture_filter_anisotropic GL_EXT_texture_filter_minmax GL_EXT_texture_integer GL_EXT_texture_lod G
L_EXT_texture_lod_bias GL_EXT_texture_mirror_clamp GL_EXT_texture_object GL_EXT_texture_shadow_lod GL_EXT_texture_shared_exponent GL_EXT_texture_sRGB GL_EXT_texture_sRGB_R8 GL_EXT_texture_sRGB_decode GL_EXT_texture_storage GL_EXT_texture_swizzle GL_EXT_timer_query GL_EXT_transform_feedback2 GL_EXT_vertex_array GL_EXT_vertex_array_bgra GL_EXT_vertex_attrib_64bit GL_EXT_window_rectangles GL_EXT_x11_sync_object GL_EXT_import_sync_object GL_NV_robustness_video_memory_purge GL_IBM_rasterpos_clip GL_IBM_texture_mirrored_repeat GL_KHR_context_flush_control GL_KHR_debug GL_EXT_memory_object GL_EXT_memory_object_fd GL_NV_memory_object_sparse GL_KHR_parallel_shader_compile GL_KHR_no_error GL_KHR_robust_buffer_access_behavior GL_KHR_robustness GL_EXT_semaphore GL_EXT_semaphore_fd GL_NV_timeline_semaphore GL_KHR_shader_subgroup GL_KTX_buffer_region GL_NV_alpha_to_coverage_dither_control GL_NV_bindless_multi_draw_indirect GL_NV_bindless_multi_draw_indirect_count GL_NV_bindless_texture GL_NV_blend_equation_advanced GL_NV_
blend_equation_advanced_coherent GL_NVX_blend_equation_advanced_multi_draw_buffers GL_NV_blend_minmax_factor GL_NV_blend_square GL_NV_clip_space_w_scaling GL_NV_command_list GL_NV_compute_program5 GL_NV_compute_shader_derivatives GL_NV_conditional_render GL_NV_conservative_raster GL_NV_conservative_raster_dilate GL_NV_conservative_raster_pre_snap GL_NV_conservative_raster_pre_snap_triangles GL_NV_conservative_raster_underestimation GL_NV_copy_depth_to_color GL_NV_copy_image GL_NV_depth_buffer_float GL_NV_depth_clamp GL_NV_draw_texture GL_NV_draw_vulkan_image GL_NV_ES1_1_compatibility GL_NV_ES3_1_compatibility GL_NV_explicit_multisample GL_NV_feature_query GL_NV_fence GL_NV_fill_rectangle GL_NV_float_buffer GL_NV_fog_distance GL_NV_fragment_coverage_to_color GL_NV_fragment_program GL_NV_fragment_program_option GL_NV_fragment_program2 GL_NV_fragment_shader_barycentric GL_NV_fragment_shader_interlock GL_NV_framebuffer_mixed_samples GL_NV_framebuffer_multisample_coverage GL_NV_geometry_shader4 GL_NV_geometry_sha
der_passthrough GL_NV_gpu_program4 GL_NV_internalformat_sample_query GL_NV_gpu_program4_1 GL_NV_gpu_program5 GL_NV_gpu_program5_mem_extended GL_NV_gpu_program_fp64 GL_NV_gpu_shader5 GL_NV_half_float GL_NV_light_max_exponent GL_NV_memory_attachment GL_NV_mesh_shader GL_NV_multisample_coverage GL_NV_multisample_filter_hint GL_NV_occlusion_query GL_NV_packed_depth_stencil GL_NV_parameter_buffer_object GL_NV_parameter_buffer_object2 GL_NV_path_rendering GL_NV_path_rendering_shared_edge GL_NV_pixel_data_range GL_NV_point_sprite GL_NV_primitive_restart GL_NV_query_resource GL_NV_query_resource_tag GL_NV_register_combiners GL_NV_register_combiners2 GL_NV_representative_fragment_test GL_NV_sample_locations GL_NV_sample_mask_override_coverage GL_NV_scissor_exclusive GL_NV_shader_atomic_counters GL_NV_shader_atomic_float GL_NV_shader_atomic_float64 GL_NV_shader_atomic_fp16_vector GL_NV_shader_atomic_int64 GL_NV_shader_buffer_load GL_NV_shader_storage_buffer_object GL_NV_shader_subgroup_partitioned GL_NV_shader_texture
_footprint GL_NV_shading_rate_image GL_NV_stereo_view_rendering GL_NV_texgen_reflection GL_NV_texture_barrier GL_NV_texture_compression_vtc GL_NV_texture_env_combine4 GL_NV_texture_multisample GL_NV_texture_rectangle GL_NV_texture_rectangle_compressed GL_NV_texture_shader GL_NV_texture_shader2 GL_NV_texture_shader3 GL_NV_transform_feedback GL_NV_transform_feedback2 GL_NV_uniform_buffer_unified_memory GL_NV_vdpau_interop GL_NV_vdpau_interop2 GL_NV_vertex_array_range GL_NV_vertex_array_range2 GL_NV_vertex_attrib_integer_64bit GL_NV_vertex_buffer_unified_memory GL_NV_vertex_program GL_NV_vertex_program1_1 GL_NV_vertex_program2 GL_NV_vertex_program2_option GL_NV_vertex_program3 GL_NV_viewport_array2 GL_NV_viewport_swizzle GL_NVX_conditional_render GL_NV_gpu_multicast GL_NVX_progress_fence GL_NVX_gpu_memory_info GL_NVX_nvenc_interop GL_NV_shader_thread_group GL_NV_shader_thread_shuffle GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent GL_OVR_multiview GL_OVR_multiview2 GL_SGIS_generate_mipmap
 GL_SGIS_texture_lod GL_SGIX_depth_texture GL_SGIX_shadow GL_SUN_slice_accum
OPENGL LOG: Creating OpenGL 4.5 graphics device ; Context level  <OpenGL 4.5> ; Context handle 653751384
Shader 'Hidden/BOXOPHOBIC/The Vegetation Engine/Helpers/Debug': dependency 'LightMode' shader 'ForwardBase' not found
State comes from an incompatible keyword space
State comes from an incompatible keyword space
Initialize mono
Mono path[0] = '/home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/Managed'
Mono path[1] = '/home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/MonoBleedingEdge/lib/mono/unityjit-linux'
Mono config path = '/home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/MonoBleedingEdge/etc'
Using monoOptions --debugger-agent=transport=dt_socket,embedding=1,server=y,suspend=n,address=127.0.0.1:56060
Begin MonoManager ReloadAssembly
Registering precompiled unity dll's ...
Register platform support module: /home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/PlaybackEngines/WebGLSupport/UnityEditor.WebGL.Extensions.dll
Register platform support module: /home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/PlaybackEngines/AndroidPlayer/UnityEditor.Android.Extensions.dll
Trying to register platform support module: /home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/PlaybackEngines/WindowsStandaloneSupport/UnityEditor.WindowsStandalone.Extensions.dll (that doesn't exist). Retrying without overrides.
Platform support module is not available: /home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/PlaybackEngines/WindowsStandaloneSupport/UnityEditor.WindowsStandalone.Extensions.dll
Register platform support module: /home/thesynthax/Unity Editor/2021.3.0f1/Editor/Data/PlaybackEngines/LinuxStandaloneSupport/UnityEditor.LinuxStandalone.Extensions.dll
Registered in 0.006339 seconds.
Native extension for LinuxStandalone target not found
Native extension for Android target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 111.04 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  0.573 seconds
Domain Reload Profiling:
	ReloadAssembly (573ms)
		BeginReloadAssembly (40ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (0ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (1ms)
		EndReloadAssembly (437ms)
			LoadAssemblies (39ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (92ms)
			ReleaseScriptCaches (0ms)
			RebuildScriptCaches (26ms)
			SetupLoadedEditorAssemblies (278ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (47ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (111ms)
				BeforeProcessingInitializeOnLoad (1ms)
				ProcessInitializeOnLoadAttributes (82ms)
				ProcessInitializeOnLoadMethodAttributes (37ms)
				AfterProcessingInitializeOnLoad (0ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (0ms)
Platform modules already initialized, skipping
Registering precompiled user dll's ...
Registered in 0.002147 seconds.
Begin MonoManager ReloadAssembly
Symbol file LoadedFromMemory is not a mono symbol file
Native extension for LinuxStandalone target not found
Native extension for Android target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 142.73 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
NullReferenceException: Object reference not set to an instance of an object
  at UnityEngine.JsonUtility.FromJson[T] (System.String json) [0x00001] in /home/bokken/buildslave/unity/build/Modules/JSONSerialize/Public/JsonUtility.bindings.cs:30 
  at UnityEditor.StateCache`1[T].GetState (UnityEngine.Hash128 key, T defaultValue) [0x00067] in /home/bokken/buildslave/unity/build/Editor/Mono/Utils/StateCache.cs:88 
  at UnityEditor.Tools.OnEnable () [0x0003a] in /home/bokken/buildslave/unity/build/Editor/Mono/GUI/Tools/Tools.cs:389 
UnityEngine.ScriptableObject:CreateScriptableObjectInstanceFromType(Type, Boolean)
UnityEngine.ScriptableObject:CreateInstance(Type) (at /home/bokken/buildslave/unity/build/Runtime/Export/Scripting/ScriptableObject.bindings.cs:35)
UnityEngine.ScriptableObject:CreateInstance() (at /home/bokken/buildslave/unity/build/Runtime/Export/Scripting/ScriptableObject.bindings.cs:41)
UnityEditor.Tools:get_get() (at /home/bokken/buildslave/unity/build/Editor/Mono/GUI/Tools/Tools.cs:50)
UnityEditor.Tools:get_visibleLayers() (at /home/bokken/buildslave/unity/build/Editor/Mono/GUI/Tools/Tools.cs:357)
UnityEditor.Animations.Rigging.BoneRendererUtils:.cctor() (at Library/PackageCache/com.unity.animation.rigging@1.1.1/Editor/Utils/BoneRendererUtils.cs:121)
System.Runtime.CompilerServices.RuntimeHelpers:RunClassConstructor(IntPtr)
System.Runtime.CompilerServices.RuntimeHelpers:RunClassConstructor(RuntimeTypeHandle)
UnityEditor.EditorAssemblies:ProcessInitializeOnLoadAttributes(Type[]) (at /home/bokken/buildslave/unity/build/Editor/Mono/EditorAssemblies.cs:126)

(Filename: /home/bokken/buildslave/unity/build/Editor/Mono/GUI/Tools/Tools.cs Line: 389)

UpdateMenuTitleForLanguage: 10
Mono: successfully reloaded assembly
- Completed reload, in  7.139 seconds
Domain Reload Profiling:
	ReloadAssembly (7140ms)
		BeginReloadAssembly (287ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (6ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (18ms)
		EndReloadAssembly (6628ms)
			LoadAssemblies (2728ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (576ms)
			ReleaseScriptCaches (1ms)
			RebuildScriptCaches (113ms)
			SetupLoadedEditorAssemblies (3321ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (19ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (143ms)
				BeforeProcessingInitializeOnLoad (91ms)
				ProcessInitializeOnLoadAttributes (2880ms)
				ProcessInitializeOnLoadMethodAttributes (181ms)
				AfterProcessingInitializeOnLoad (6ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (3ms)
Platform modules already initialized, skipping
========================================================================
Worker process is ready to serve import requests
State comes from an incompatible keyword space
State comes from an incompatible keyword space
Shader 'Hidden/BOXOPHOBIC/The Vegetation Engine/Helpers/Debug': dependency 'LightMode' shader 'ForwardBase' not found
Launched and connected shader compiler UnityShaderCompiler after 0.26 seconds
-------- Shader TENKOKU/cloud_sphere compilation failed
#version 450
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _SampleCount0;
uniform 	float _SampleCount1;
uniform 	int _SampleCountL;
uniform 	float _NoiseFreq1;
uniform 	float _NoiseFreq2;
uniform 	float _NoiseAmp1;
uniform 	float _NoiseAmp2;
uniform 	float _NoiseBias;
uniform 	float _NoiseBias2;
uniform 	float _NoiseBias3;
uniform 	vec3 _Scroll1;
uniform 	vec3 _Scroll2;
uniform 	float _Altitude0;
uniform 	float _Altitude1;
uniform 	float _Altitude2;
uniform 	float _Altitude3;
uniform 	float _Altitude4;
uniform 	float _Altitude5;
uniform 	float _FarDist;
uniform 	float _Scatter;
uniform 	float _HGCoeff;
uniform 	float _Extinct;
uniform 	float _Edge;
uniform 	float _Darkness;
uniform 	float _humid;
uniform 	vec4 Tenkoku_Vec_SunFwd;
uniform 	vec4 Tenkoku_Vec_MoonFwd;
uniform 	vec4 Tenkoku_Vec_LightningFwd;
uniform 	float Tenkoku_LightningLightIntensity;
uniform 	vec4 Tenkoku_LightningColor;
uniform 	vec4 _TenkokuSunColor;
uniform 	vec4 Tenkoku_MoonLightColor;
uniform 	vec4 _TenkokuCloudColor;
uniform 	vec4 _TenkokuCloudAmbientColor;
uniform 	float _Tenkoku_Ambient;
uniform 	float _Tenkoku_AmbientGI;
uniform 	vec4 _Tenkoku_overcastColor;
uniform 	float _Tenkoku_overcastAmt;
uniform 	float _cS;
uniform 	float _tenkokuTimer;
uniform 	float _tenkokuNoiseTimer;
uniform 	float _Tenkoku_UseElek;
UNITY_LOCATION(0) uniform  sampler2D _Tenkoku_SkyTex;
UNITY_LOCATION(1) uniform  sampler2D _Tenkoku_SkyBox;
UNITY_LOCATION(2) uniform  sampler3D _NoiseTex1;
UNITY_LOCATION(3) uniform  sampler3D _NoiseTex2;
UNITY_LOCATION(4) uniform  sampler2D _CloudTex1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat16_6;
vec4 u_xlat7;
vec4 u_xlat16_7;
vec3 u_xlat8;
vec4 u_xlat16_8;
vec4 u_xlat9;
vec4 u_xlat16_9;
vec3 u_xlat10;
vec4 u_xlat16_10;
vec4 u_xlat11;
vec4 u_xlat16_11;
vec3 u_xlat12;
vec4 u_xlat16_12;
vec3 u_xlat13;
vec4 u_xlat16_13;
vec3 u_xlat14;
vec4 u_xlat16_14;
vec2 u_xlat16;
bool u_xlatb16;
vec3 u_xlat19;
vec3 u_xlat22;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
vec3 u_xlat26;
float u_xlat28;
vec2 u_xlat31;
int u_xlati31;
bvec2 u_xlatb31;
vec2 u_xlat34;
vec2 u_xlat35;
bool u_xlatb35;
float u_xlat37;
float u_xlat38;
float u_xlat39;
bool u_xlatb39;
float u_xlat40;
int u_xlati40;
bool u_xlatb40;
float u_xlat43;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
int u_xlati46;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
int u_xlati49;
float u_xlat50;
bool u_xlatb50;
float u_xlat51;
bool u_xlatb51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
bool u_xlatb54;
float u_xlat55;
int u_xlati56;
float u_xlat57;
bool u_xlatb57;
void main()
{
    u_xlat0.xyz = max(vs_TEXCOORD2.xyw, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlatb1.xy = equal(vec4(_Tenkoku_UseElek), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    if(u_xlatb1.x){
        u_xlat1.xz = u_xlat0.xy / u_xlat0.zz;
        u_xlat10_2 = texture(_Tenkoku_SkyTex, u_xlat1.xz);
    } else {
        u_xlat16_2.x = float(1.0);
        u_xlat16_2.y = float(1.0);
        u_xlat16_2.z = float(1.0);
    }
    if(u_xlatb1.y){
        u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
        u_xlat16_2 = texture(_Tenkoku_SkyBox, u_xlat0.xy);
    }
    u_xlat0.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlatb45 = (-vs_TEXCOORD1.y)<0.00999999978;
    u_xlatb1.x = 0.0>=_FarDist;
    u_xlatb45 = u_xlatb45 || u_xlatb1.x;
    if(u_xlatb45){
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 0.0;
        return;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(vec2(_tenkokuTimer, _tenkokuTimer));
    u_xlat3.xyz = vec3(vec3(_Darkness, _Darkness, _Darkness)) * (-u_xlat0.xyz) + u_xlat0.xyz;
    u_xlat45 = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat1.xy);
    u_xlat45 = sin(u_xlat45);
    u_xlat45 = u_xlat45 * 43758.5469;
    u_xlat45 = fract(u_xlat45);
    u_xlatb31.x = 0.0<_NoiseBias;
    if(u_xlatb31.x){
        u_xlat31.xy = trunc(vec2(_SampleCount1, _SampleCount0));
        u_xlat46 = (-u_xlat31.x) + u_xlat31.y;
        u_xlat31.x = (-vs_TEXCOORD1.y) * u_xlat46 + u_xlat31.x;
        u_xlati46 = int(u_xlat31.x);
        u_xlat47 = _Altitude0 / (-vs_TEXCOORD1.y);
        u_xlat48 = _Altitude1 / (-vs_TEXCOORD1.y);
        u_xlat48 = (-u_xlat47) + u_xlat48;
        u_xlat31.x = trunc(u_xlat31.x);
        u_xlat4.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = u_xlat45 * u_xlat48;
        u_xlat31.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = dot((-vs_TEXCOORD1.xyz), Tenkoku_Vec_SunFwd.xyz);
        u_xlat19.x = (-_HGCoeff) * _HGCoeff + 1.0;
        u_xlat19.x = u_xlat19.x * 0.5;
        u_xlat34.x = _HGCoeff * _HGCoeff + 1.0;
        u_xlat48 = (-_HGCoeff) * u_xlat48 + u_xlat34.x;
        u_xlat48 = u_xlat48 * u_xlat48;
        u_xlat48 = u_xlat19.x / u_xlat48;
        u_xlat19.x = u_xlat48 * 6.0 + -3.0;
        u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
        u_xlat48 = u_xlat48 + u_xlat19.x;
        u_xlat31.x = u_xlat31.x + u_xlat47;
        u_xlat5.xz = _WorldSpaceCameraPos.xz;
        u_xlat5.y = 0.0;
        u_xlat19.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat5.xyz;
        u_xlatb31.x = 0.275000006<_Tenkoku_overcastAmt;
        u_xlati31 = (u_xlatb31.x) ? 4 : u_xlati46;
        u_xlat5.xyz = _Scroll1.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat6.xyz = _Scroll2.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat46 = _NoiseBias * 2.55000019 + -0.400000006;
        u_xlat47 = (-_Altitude0) + _Altitude1;
        u_xlat7.xy = vec2(u_xlat47) * vec2(0.100000001, 0.400000006);
        u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
        u_xlat50 = float(_SampleCountL);
        u_xlat51 = u_xlat50 * Tenkoku_Vec_SunFwd.y;
        u_xlat37 = _Extinct * -0.75;
        u_xlat8.xyz = u_xlat19.xyz;
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = float(0.0);
        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati31 ; u_xlati_loop_1++)
        {
            u_xlat10.xyz = u_xlat8.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
            u_xlat10.xyz = u_xlat10.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat8.xyz * vec3(_NoiseFreq2);
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat10.xyz = u_xlat10.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat16_10 = textureLod(_NoiseTex1, u_xlat10.xyz, 0.0);
            u_xlat16_11 = textureLod(_NoiseTex2, u_xlat11.xyz, 0.0);
            u_xlat39 = u_xlat16_11.w * _NoiseAmp2;
            u_xlat39 = u_xlat16_10.w * _NoiseAmp1 + u_xlat39;
            u_xlat39 = u_xlat46 + u_xlat39;
            u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
            u_xlat54 = u_xlat8.y + (-_Altitude0);
            u_xlat10.x = u_xlat7.x * u_xlat54;
            u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
            u_xlat25 = u_xlat10.x * -2.0 + 3.0;
            u_xlat10.x = u_xlat10.x * u_xlat10.x;
            u_xlat10.x = u_xlat10.x * u_xlat25;
            u_xlat39 = u_xlat39 * u_xlat10.x;
            u_xlat54 = u_xlat47 + (-u_xlat54);
            u_xlat54 = u_xlat7.y * u_xlat54;
            u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
            u_xlat10.x = u_xlat54 * -2.0 + 3.0;
            u_xlat54 = u_xlat54 * u_xlat54;
            u_xlat54 = u_xlat54 * u_xlat10.x;
            u_xlat39 = u_xlat54 * u_xlat39;
            u_xlatb54 = _Edge<u_xlat39;
            if(u_xlatb54){
                u_xlat54 = u_xlat4.x * u_xlat39;
                u_xlat10.x = float(u_xlati_loop_1);
                u_xlat10.xy = u_xlat1.xy + u_xlat10.xx;
                u_xlat10.x = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat10.xy);
                u_xlat10.x = sin(u_xlat10.x);
                u_xlat10.x = u_xlat10.x * 43758.5469;
                u_xlat10.x = fract(u_xlat10.x);
                u_xlat54 = u_xlat54 * _Scatter;
                u_xlat54 = u_xlat48 * u_xlat54;
                u_xlat25 = (-u_xlat8.y) + _Altitude1;
                u_xlat40 = u_xlat25 / u_xlat51;
                u_xlat11.xyz = vec3(u_xlat40) * Tenkoku_Vec_SunFwd.xyz;
                u_xlat11.xyz = u_xlat11.xyz * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat11.xyz;
                u_xlat55 = 0.0;
                for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<_SampleCountL ; u_xlati_loop_2++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat55 = u_xlat57 * u_xlat40 + u_xlat55;
                    u_xlat12.xyz = Tenkoku_Vec_SunFwd.xyz * vec3(u_xlat40) + u_xlat12.xyz;
                }
                u_xlatb40 = 0.100000001>=u_xlat55;
                u_xlat40 = (u_xlatb40) ? 0.0 : u_xlat55;
                u_xlat11.x = u_xlat40 * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat40 = u_xlat37 * u_xlat40;
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat40 = (-u_xlat40) + 1.0;
                u_xlat40 = u_xlat40 * u_xlat11.x;
                u_xlat40 = u_xlat54 * u_xlat40;
                u_xlat40 = u_xlat40 * _TenkokuCloudColor.x;
                u_xlat11.x = u_xlat9.x * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat26.x = u_xlat37 * u_xlat9.x;
                u_xlat26.x = u_xlat26.x * 1.44269502;
                u_xlat26.x = exp2(u_xlat26.x);
                u_xlat26.x = (-u_xlat26.x) + 1.0;
                u_xlat11.x = u_xlat26.x * u_xlat11.x;
                u_xlat52 = u_xlat40 * u_xlat11.x + u_xlat52;
                u_xlat25 = u_xlat25 / u_xlat50;
                u_xlat26.xy = vec2(u_xlat25) * vec2(1.0, 0.0);
                u_xlat26.xyz = u_xlat26.yxy * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat26.xyz;
                u_xlat10.x = float(0.0);
                for(int u_xlati_loop_3 = int(0) ; u_xlati_loop_3<_SampleCountL ; u_xlati_loop_3++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat10.x = u_xlat57 * u_xlat25 + u_xlat10.x;
                    u_xlat12.xyz = vec3(u_xlat25) * vec3(0.0, 1.0, 0.0) + u_xlat12.xyz;
                }
                u_xlatb25 = 0.100000001>=u_xlat10.x;
                u_xlat25 = (u_xlatb25) ? 0.0 : u_xlat10.x;
                u_xlat40 = u_xlat25 * (-_Extinct);
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat25 = u_xlat37 * u_xlat25;
                u_xlat25 = u_xlat25 * 1.44269502;
                u_xlat25 = exp2(u_xlat25);
                u_xlat25 = (-u_xlat25) + 1.0;
                u_xlat25 = u_xlat25 * u_xlat40;
                u_xlat54 = u_xlat54 * u_xlat25;
                u_xlat53 = u_xlat54 * u_xlat11.x + u_xlat53;
                u_xlat9.x = u_xlat39 * u_xlat4.x + u_xlat9.x;
            }
            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat8.xyz;
        }
    } else {
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = 0.0;
    }
    u_xlat1.x = u_xlat9.x * 1.25;
    u_xlat1.x = u_xlat1.x * (-_Extinct);
    u_xlat1.x = u_xlat1.x * 1.44269502;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat16.x = u_xlat1.x * u_xlat0.x + u_xlat52;
    u_xlatb31.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_NoiseBias2, _NoiseBias3, _NoiseBias2, _NoiseBias3)).xy;
    if(u_xlatb31.x){
        u_xlat4.xy = vec2(_Altitude2, _Altitude3) / (-vs_TEXCOORD1.yy);
        u_xlat31.x = (-u_xlat4.x) + u_xlat4.y;
        u_xlat47 = u_xlat31.x * 0.0500000007;
        u_xlat31.x = u_xlat45 * u_xlat31.x;
        u_xlat31.x = u_xlat31.x * 0.0500000007 + u_xlat4.x;
        u_xlat4.xz = _WorldSpaceCameraPos.xz;
        u_xlat4.y = 0.0;
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat4.xyz;
        u_xlat5.xyz = vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer)) * vec3(1.39999998, 0.0, 0.349999994);
        u_xlat6.xyz = u_xlat5.xyz * _Scroll1.xyz;
        u_xlat5.xyz = u_xlat5.xyz * _Scroll2.xyz;
        u_xlat7 = vec4(_NoiseBias2) * vec4(1.29999995, 4.9000001, 24.0, 2.5) + vec4(0.200000003, 0.100000001, 20.0, 0.300000012);
        u_xlat31.x = (-_Altitude2) + _Altitude3;
        u_xlat8.xy = u_xlat31.xx * vec2(0.100000001, 0.400000006);
        u_xlat8.xy = vec2(1.0, 1.0) / u_xlat8.xy;
        u_xlat9 = u_xlat6.xzxz * vec4(0.5, 0.5, 0.5, 0.5);
        u_xlat10.xyz = u_xlat4.xyz;
        u_xlat48 = 0.0;
        for(int u_xlati_loop_4 = 0 ; u_xlati_loop_4<4 ; u_xlati_loop_4++)
        {
            u_xlat11.xyz = u_xlat7.xxx * u_xlat10.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat12.xyz = u_xlat7.yyy * u_xlat10.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat13.xyz = u_xlat7.zzz * u_xlat10.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(1.0, 4.0, 1.0);
            u_xlat16_11 = textureLod(_NoiseTex1, u_xlat11.xyz, 0.0);
            u_xlat16_12 = textureLod(_NoiseTex2, u_xlat12.xyz, 0.0);
            u_xlat16_13 = textureLod(_NoiseTex2, u_xlat13.xyz, 0.0);
            u_xlat50 = u_xlat16_13.w * _NoiseAmp2;
            u_xlat50 = u_xlat16_12.w * _NoiseAmp1 + u_xlat50;
            u_xlat50 = (-u_xlat16_11.w) * 0.800000012 + u_xlat50;
            u_xlat50 = u_xlat7.w + u_xlat50;
            u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
            u_xlat51 = u_xlat10.y + (-_Altitude2);
            u_xlat38 = u_xlat8.x * u_xlat51;
            u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
            u_xlat55 = u_xlat38 * -2.0 + 3.0;
            u_xlat38 = u_xlat38 * u_xlat38;
            u_xlat38 = u_xlat38 * u_xlat55;
            u_xlat50 = u_xlat50 * u_xlat38;
            u_xlat51 = u_xlat31.x + (-u_xlat51);
            u_xlat51 = u_xlat8.y * u_xlat51;
            u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
            u_xlat38 = u_xlat51 * -2.0 + 3.0;
            u_xlat51 = u_xlat51 * u_xlat51;
            u_xlat51 = u_xlat51 * u_xlat38;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlat11 = u_xlat10.xzxz * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat9;
            u_xlat16_12 = textureLod(_CloudTex1, u_xlat11.xy, 0.0);
            u_xlat16_11 = textureLod(_CloudTex1, u_xlat11.zw, 0.0);
            u_xlat51 = (-u_xlat16_11.y) + u_xlat16_12.z;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlatb51 = _Edge<u_xlat50;
            if(u_xlatb51){
                u_xlat48 = u_xlat50 * u_xlat47 + u_xlat48;
            }
            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat47) + u_xlat10.xyz;
        }
    } else {
        u_xlat48 = 0.0;
    }
    u_xlat1.z = u_xlat48 * (-_Extinct);
    u_xlat1.xz = u_xlat1.xz * vec2(8.0, 1.44269502);
    u_xlat31.x = exp2(u_xlat1.z);
    u_xlat3.xyz = u_xlat31.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat47 = _Altitude4 / (-vs_TEXCOORD1.y);
    u_xlat48 = _Altitude5 / (-vs_TEXCOORD1.y);
    u_xlat48 = (-u_xlat47) + u_xlat48;
    u_xlat45 = u_xlat45 * u_xlat48;
    u_xlat45 = u_xlat45 * 0.0199999996 + u_xlat47;
    u_xlat4.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + _WorldSpaceCameraPos.xz;
    if(u_xlatb31.y){
        u_xlat45 = u_xlat48 * 0.0199999996;
        u_xlat34.xy = _Scroll1.xz * vec2(vec2(_tenkokuTimer, _tenkokuTimer));
        u_xlat34.xy = u_xlat34.xy * vec2(0.224999994, 0.0375000015);
        u_xlat46 = _NoiseBias3 * 1.35000002 + -0.100000001;
        u_xlat5.xy = u_xlat4.xy;
        u_xlat47 = 0.0;
        for(int u_xlati_loop_5 = 0 ; u_xlati_loop_5<4 ; u_xlati_loop_5++)
        {
            u_xlat35.xy = u_xlat5.xy * vec2(vec2(_cS, _cS));
            u_xlat6 = u_xlat35.xyxy * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat34.xyxy;
            u_xlat35.xy = u_xlat35.xy * vec2(9.99999975e-06, 9.99999975e-06) + u_xlat34.xy;
            u_xlat16_7 = textureLod(_CloudTex1, u_xlat6.xy, 0.0);
            u_xlat16_6 = textureLod(_CloudTex1, u_xlat6.zw, 0.0);
            u_xlat16_9 = textureLod(_CloudTex1, u_xlat35.xy, 0.0);
            u_xlat35.x = u_xlat16_6.y + u_xlat16_9.w;
            u_xlat35.x = (-u_xlat16_7.z) * 1.20000005 + u_xlat35.x;
            u_xlat35.x = u_xlat46 + u_xlat35.x;
            u_xlat35.x = clamp(u_xlat35.x, 0.0, 1.0);
            u_xlat47 = u_xlat35.x * u_xlat45 + u_xlat47;
            u_xlat5.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + u_xlat5.xy;
        }
    } else {
        u_xlat47 = 0.0;
    }
    u_xlat45 = u_xlat47 * (-_Extinct);
    u_xlat45 = u_xlat45 * 2.88539004;
    u_xlat45 = exp2(u_xlat45);
    u_xlat46 = dot((-vs_TEXCOORD1.xyz), (-vs_TEXCOORD1.xyz));
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * (-vs_TEXCOORD1.xyz);
    u_xlat47 = dot(u_xlat5.xyz, Tenkoku_Vec_SunFwd.xyz);
    u_xlat48 = dot(u_xlat5.xyz, Tenkoku_Vec_MoonFwd.xyz);
    u_xlat34.x = u_xlat47 * 2.0 + -0.75;
    u_xlat34.x = clamp(u_xlat34.x, 0.0, 1.0);
    u_xlat49 = u_xlat47 * 10.0 + -8.75;
    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
    u_xlat47 = u_xlat47 + 0.899999976;
    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
    u_xlat6.xyz = vec3(u_xlat48) + vec3(-0.400000006, -0.100000001, -0.00999999978);
    u_xlat6.xyz = u_xlat6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
    u_xlat48 = max(_TenkokuSunColor.y, _TenkokuSunColor.x);
    u_xlat48 = max(u_xlat48, _TenkokuSunColor.z);
    u_xlat48 = (-u_xlat48) + 1.0;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat7.xy = vec2(vec2(_NoiseBias, _NoiseBias)) * vec2(-0.150000036, -0.299999982) + vec2(0.600000024, 0.699999988);
    u_xlat8.xyz = u_xlat7.xxx * _TenkokuCloudColor.xyz;
    u_xlat9.xyz = (-_TenkokuCloudColor.xyz) * u_xlat7.xxx + _TenkokuCloudColor.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat8.xyz * _Tenkoku_overcastColor.xyz + (-u_xlat8.xyz);
    u_xlat8.xyz = vec3(_Tenkoku_overcastAmt) * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat53) * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat1.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat7.yyy * u_xlat8.xyz;
    u_xlat22.xyz = (-u_xlat8.xyz) * u_xlat7.yyy + u_xlat8.xyz;
    u_xlat22.xyz = vec3(u_xlat53) * u_xlat22.xyz + u_xlat9.xyz;
    u_xlat8.xyz = _TenkokuCloudAmbientColor.xyz * vec3(_Tenkoku_Ambient);
    u_xlat9.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16.x = (-u_xlat47) + u_xlat53;
    u_xlat16.x = u_xlat16.x + 1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat8.xyz = (-u_xlat8.xyz) * vec3(0.5, 0.5, 0.5) + u_xlat22.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat9.xyz;
    u_xlat22.xyz = u_xlat22.xyz + (-u_xlat8.xyz);
    u_xlat22.xyz = vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) * u_xlat22.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat22.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
    u_xlat16.x = _TenkokuCloudAmbientColor.w * -0.300000012 + 1.0;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.5, 2.5, 2.5) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat1.y = u_xlat31.x * u_xlat34.x;
    u_xlat1.xy = u_xlat1.xy * vec2(3.0, 1.5);
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.20000005, 2.20000005, 2.20000005) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat1.yyy * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat16.x = u_xlat31.x * u_xlat49;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(5.4000001, 5.4000001, 5.4000001) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat31.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat3.xyz * vec3(1.20000005, 1.20000005, 1.20000005);
    u_xlat10.xyz = vec3(u_xlat45) * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyw = u_xlat6.yyy * u_xlat10.xyz;
    u_xlat6.xyw = vec3(u_xlat48) * u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(0.100000001, 0.100000001, 0.100000001);
    u_xlat6.xyw = _TenkokuCloudAmbientColor.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) + u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat16.x = u_xlat31.x * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat45 = min(u_xlat45, 1.0);
    u_xlat10.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat6.xyw);
    u_xlat6.xyw = vec3(u_xlat45) * u_xlat10.xyz + u_xlat6.xyw;
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(1.20000005, 1.20000005, 1.20000005) + u_xlat6.xyw;
    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat9.xyz;
    u_xlat3.xyz = (-u_xlat22.xyz) * vec3(1.39999998, 1.39999998, 1.39999998) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat8.xyz;
    u_xlat31.x = (-_NoiseBias3) + 1.0;
    u_xlat47 = (-u_xlat1.x) + 1.0;
    u_xlat47 = (-u_xlat31.x) + u_xlat47;
    u_xlat31.x = _NoiseBias3 * u_xlat47 + u_xlat31.x;
    u_xlat45 = u_xlat45 + u_xlat31.x;
    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
    u_xlat45 = u_xlat45 + -0.100000001;
    u_xlat45 = u_xlat16.x * u_xlat45 + 0.100000001;
    u_xlat16.xy = u_xlat4.xy * vec2(vec2(_cS, _cS));
    u_xlat4.xy = vec2(_Tenkoku_overcastAmt, _tenkokuTimer) + vec2(_Tenkoku_overcastAmt, _tenkokuTimer);
    u_xlat19.xy = u_xlat4.yy * _Scroll1.xz;
    u_xlat16.xy = u_xlat16.xy * vec2(2.99999992e-05, 2.99999992e-05) + u_xlat19.xy;
    u_xlat16_8 = textureLod(_CloudTex1, u_xlat16.xy, 0.0);
    u_xlat16.x = max(_TenkokuCloudColor.y, _TenkokuCloudColor.x);
    u_xlat16.x = max(u_xlat16.x, _TenkokuCloudColor.z);
    u_xlat19.xyz = u_xlat16.xxx + (-_TenkokuCloudColor.xyz);
    u_xlat19.xyz = u_xlat19.xyz * vec3(0.649999976, 0.649999976, 0.649999976) + _TenkokuCloudColor.xyz;
    u_xlat6.xyw = u_xlat7.xxx * u_xlat19.xyz;
    u_xlat8.x = u_xlat16_8.x;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat19.xyz = (-u_xlat19.xyz) * u_xlat7.xxx + u_xlat19.xyz;
    u_xlat19.xyz = u_xlat8.xxx * u_xlat19.xyz + u_xlat6.xyw;
    u_xlat16.x = _Tenkoku_overcastAmt * -0.5 + 1.0;
    u_xlat6.xyw = u_xlat19.xyz * _Tenkoku_overcastColor.xyz;
    u_xlat4.x = u_xlat4.x;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat6.xyw * u_xlat16.xxx + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat4.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat16.x = 1900.0 / (-vs_TEXCOORD1.y);
    u_xlat16.x = u_xlat16.x / _FarDist;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat16.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat6.xyz = u_xlat6.zzz * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyz = vec3(u_xlat48) * u_xlat6.xyz;
    u_xlat19.xyz = u_xlat6.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat19.xyz;
    u_xlat19.xyz = (-u_xlat3.xyz) + u_xlat19.xyz;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat19.xyz + u_xlat3.xyz;
    u_xlatb16 = 0.0<Tenkoku_LightningLightIntensity;
    u_xlat31.x = dot(Tenkoku_Vec_LightningFwd.xyz, u_xlat5.xyz);
    u_xlat31.x = clamp(u_xlat31.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat31.xxx + vec3(-0.300000012, -0.649999976, -0.999899983);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = vec3(Tenkoku_LightningLightIntensity) * Tenkoku_LightningColor.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(0.25, 0.25, 0.25) + u_xlat3.xyz;
    u_xlat4.xy = u_xlat4.xy * vec2(0.25, 0.5);
    u_xlat31.x = u_xlat4.y + u_xlat4.x;
    u_xlat31.x = u_xlat4.z * 3000.0 + u_xlat31.x;
    u_xlat4.xyz = u_xlat31.xxx * Tenkoku_LightningColor.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(Tenkoku_LightningLightIntensity) + u_xlat5.xyz;
    u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat16.x = (-vs_TEXCOORD1.y) * u_xlat46 + -0.0250000004;
    u_xlat16.x = u_xlat16.x * 3.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat3.xyz = (-u_xlat10_2.xyz) * vec3(0.800000012, 0.800000012, 0.800000012) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16.x = _humid * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat16.xxx * u_xlat2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(1.25, 1.25, 1.25);
    SV_Target0.w = (-u_xlat1.x) * u_xlat45 + 1.0;
    return;
}
-------- failed compiling:
fragment evaluation shader
GLSL compilation failed for shader TENKOKU/cloud_sphere:
0(149) : error C1503: undefined variable "u_xlat10_2"
0(159) : error C1503: undefined variable "u_xlat10_2"
0(531) : error C1503: undefined variable "u_xlat10_2"
0(555) : error C1503: undefined variable "u_xlat10_2"
0(592) : error C1503: undefined variable "u_xlat10_2"
0(615) : error C1503: undefined variable "u_xlat10_2"
0(619) : error C1503: undefined variable "u_xlat10_2"
Note: Creation of internal variant of shader 'TENKOKU/cloud_sphere' failed.
Refreshing native plugins compatible for Editor in 1.57 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 4992 Unused Serialized files (Serialized files now loaded: 0)
Unloading 62 unused Assets / (11.5 MB). Loaded Objects now: 5463.
Memory consumption went from 403.3 MB to 391.8 MB.
Total: 8.882194 ms (FindLiveObjects: 0.578683 ms CreateObjectMapping: 0.629049 ms MarkObjects: 4.487933 ms  DeleteObjects: 3.183727 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
========================================================================
Received Import Request.
  Time since last request: 94560.436248 seconds.
  path: Assets/Assets/NatureManufacture Assets/Forest Environment Dynamic Nature/R.A.M Non Tesseled trial/Textures/T_duckweed_01_A_T.tga
  artifactKey: Guid(14d1b20a4da601e40bc528c48ead20c7) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/NatureManufacture Assets/Forest Environment Dynamic Nature/R.A.M Non Tesseled trial/Textures/T_duckweed_01_A_T.tga using Guid(14d1b20a4da601e40bc528c48ead20c7) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '7d7b4f96a242e92dd9bc0479fcd76926') in 0.086394 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.000019 seconds.
  path: Assets/Assets/NatureManufacture Assets/Forest Environment Dynamic Nature/R.A.M Non Tesseled trial/Textures/T_RAM_River_Noise_Swamp.tga
  artifactKey: Guid(66398daa156cf5e4886d181446169ca5) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/NatureManufacture Assets/Forest Environment Dynamic Nature/R.A.M Non Tesseled trial/Textures/T_RAM_River_Noise_Swamp.tga using Guid(66398daa156cf5e4886d181446169ca5) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'ebfe643acf96c89e74edf7d32d8dc659') in 0.407157 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.000020 seconds.
  path: Assets/Assets/NatureManufacture Assets/Forest Environment Dynamic Nature/R.A.M Non Tesseled trial/Textures/T_RAM_River_Height.png
  artifactKey: Guid(9f1d5e83b0b47104684e6a5b22948a21) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/NatureManufacture Assets/Forest Environment Dynamic Nature/R.A.M Non Tesseled trial/Textures/T_RAM_River_Height.png using Guid(9f1d5e83b0b47104684e6a5b22948a21) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'dea53192b7a574ec6233f5f9943112d1') in 0.097901 seconds 
========================================================================
Received Import Request.
  Time since last request: 296.149620 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - Common/AG Global Settings
  artifactKey: Guid(bab678d333fd15e4883dacb915595283) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - Common/AG Global Settings using Guid(bab678d333fd15e4883dacb915595283) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'da0581317ec0dae4b992baff281d4bbe') in 0.000942 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.167407 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - Common/Functions
  artifactKey: Guid(a267c17617a1c3140a7a388a1eb88090) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - Common/Functions using Guid(a267c17617a1c3140a7a388a1eb88090) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '4832713e3ae455c128d446c5bca77647') in 0.000524 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.056397 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - Common/Shaders
  artifactKey: Guid(23f9088b87a79a14cbeb074bdaa5e019) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - Common/Shaders using Guid(23f9088b87a79a14cbeb074bdaa5e019) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '20b20f327862b7395aab503eb8d78c08') in 0.000443 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.199575 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - Common/Readme.txt
  artifactKey: Guid(98a4c012213abaa428b6a71200be9a6c) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - Common/Readme.txt using Guid(98a4c012213abaa428b6a71200be9a6c) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '89029725371bd903f805069c323485fa') in 0.014999 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.902235 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks
  artifactKey: Guid(40edbfb283e366a43823a135c22e0119) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks using Guid(40edbfb283e366a43823a135c22e0119) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '989b30dc3abaa9f42d9ad25e61351cb9') in 0.000534 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.500828 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Ground Textures
  artifactKey: Guid(7b8a02974de22484292bdd7c1527f9bf) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Ground Textures using Guid(7b8a02974de22484292bdd7c1527f9bf) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '607dc1521e8e3afa0b9c85c937060434') in 0.000579 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.203942 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Particles
  artifactKey: Guid(532cf78623d440741bd99156d1d15282) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Particles using Guid(532cf78623d440741bd99156d1d15282) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '692567308e003664104368dd8440b46d') in 0.000469 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.059501 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Prefabs Rocks Desktop
  artifactKey: Guid(0ebc92b4820ead94fb94eb0ee890e278) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Prefabs Rocks Desktop using Guid(0ebc92b4820ead94fb94eb0ee890e278) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'a03a1c05b62dece880e4f47a6c15aa31') in 0.000546 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.058866 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Scenes
  artifactKey: Guid(084ef4201041e3d42ae8c2962c89e975) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Scenes using Guid(084ef4201041e3d42ae8c2962c89e975) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '027c7f98f8fd558246107622df0ae15d') in 0.000440 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.052117 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Shaders
  artifactKey: Guid(8080cfb47aa3abd41901875f028758e1) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Shaders using Guid(8080cfb47aa3abd41901875f028758e1) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'effedc6fae86bc1b3b9b1e82b86d6252') in 0.000443 seconds 
========================================================================
Received Import Request.
  Time since last request: 1.128089 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Scenes/Demo_Moss.unity
  artifactKey: Guid(d456780a1f5044d4ea354c58fa9730da) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Scenes/Demo_Moss.unity using Guid(d456780a1f5044d4ea354c58fa9730da) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '333ff23517f8629d32e80117d5b39deb') in 0.000603 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.213105 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Scenes/Demo_Sand.unity
  artifactKey: Guid(cc0f8bf337be25740bbdc755ab6d6550) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Scenes/Demo_Sand.unity using Guid(cc0f8bf337be25740bbdc755ab6d6550) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '7a76fce0a47046d5a19fca872565aa9b') in 0.000621 seconds 
========================================================================
Received Import Request.
  Time since last request: 35.922091 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/PBR Rocks Documentation.pdf
  artifactKey: Guid(777c51675ec0eae48962f8a1ac1fd4a7) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/PBR Rocks Documentation.pdf using Guid(777c51675ec0eae48962f8a1ac1fd4a7) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '5f935c9c2b250360b675951dbcf2907f') in 0.001039 seconds 
========================================================================
Received Import Request.
  Time since last request: 44.146209 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP
  artifactKey: Guid(d78aa631eb31f16448105b977cebcef7) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP using Guid(d78aa631eb31f16448105b977cebcef7) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '10315a8825da9dafd7d838ebc4dbfe47') in 0.000680 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.988516 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/Legacy
  artifactKey: Guid(2a342b6c881aadd45aeb39bae4171ed3) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/Legacy using Guid(2a342b6c881aadd45aeb39bae4171ed3) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '0f3c6a2ec80af31d25cdf4cfdd3ea8dd') in 0.000553 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.207092 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/HDRP Template 7.2.1.unitypackage
  artifactKey: Guid(de596e7307800cb4c909ac55a45a7db7) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/HDRP Template 7.2.1.unitypackage using Guid(de596e7307800cb4c909ac55a45a7db7) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '621c8373e80e6b2f116b7b42b2ed795e') in 0.042130 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.045872 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/Readme.txt
  artifactKey: Guid(8a60f7f7b6e5e5241b0a7a5181eab9a8) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/Readme.txt using Guid(8a60f7f7b6e5e5241b0a7a5181eab9a8) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'aa0896d1429fea198b71e393d88c5480') in 0.000790 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.110640 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/URP Template 7.2.1.unitypackage
  artifactKey: Guid(d3e197906bd5a534fb624ad5158cc0a0) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/URP Template 7.2.1.unitypackage using Guid(d3e197906bd5a534fb624ad5158cc0a0) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '879a5d6c1592456e31af01d8258b66c6') in 0.000904 seconds 
========================================================================
Received Import Request.
  Time since last request: 1.022856 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/URP Template 10.2.2.unitypackage
  artifactKey: Guid(730fdefd208ce1f48ba623af5e3b86fd) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/SRP/URP Template 10.2.2.unitypackage using Guid(730fdefd208ce1f48ba623af5e3b86fd) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'd7f0062e0d3102cb575a672c4fc9c505') in 0.000903 seconds 
========================================================================
Received Prepare
Registering precompiled user dll's ...
Registered in 0.001992 seconds.
Begin MonoManager ReloadAssembly
Symbol file LoadedFromMemory is not a mono symbol file
Native extension for LinuxStandalone target not found
Native extension for Android target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 1.12 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  1.243 seconds
Domain Reload Profiling:
	ReloadAssembly (1243ms)
		BeginReloadAssembly (93ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (5ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (33ms)
		EndReloadAssembly (1069ms)
			LoadAssemblies (54ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (197ms)
			ReleaseScriptCaches (1ms)
			RebuildScriptCaches (46ms)
			SetupLoadedEditorAssemblies (719ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (16ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (1ms)
				BeforeProcessingInitializeOnLoad (51ms)
				ProcessInitializeOnLoadAttributes (565ms)
				ProcessInitializeOnLoadMethodAttributes (82ms)
				AfterProcessingInitializeOnLoad (4ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (5ms)
Platform modules already initialized, skipping
State comes from an incompatible keyword space
State comes from an incompatible keyword space
Shader 'Hidden/BOXOPHOBIC/The Vegetation Engine/Helpers/Debug': dependency 'LightMode' shader 'ForwardBase' not found
-------- Shader TENKOKU/cloud_sphere compilation failed
#version 450
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _SampleCount0;
uniform 	float _SampleCount1;
uniform 	int _SampleCountL;
uniform 	float _NoiseFreq1;
uniform 	float _NoiseFreq2;
uniform 	float _NoiseAmp1;
uniform 	float _NoiseAmp2;
uniform 	float _NoiseBias;
uniform 	float _NoiseBias2;
uniform 	float _NoiseBias3;
uniform 	vec3 _Scroll1;
uniform 	vec3 _Scroll2;
uniform 	float _Altitude0;
uniform 	float _Altitude1;
uniform 	float _Altitude2;
uniform 	float _Altitude3;
uniform 	float _Altitude4;
uniform 	float _Altitude5;
uniform 	float _FarDist;
uniform 	float _Scatter;
uniform 	float _HGCoeff;
uniform 	float _Extinct;
uniform 	float _Edge;
uniform 	float _Darkness;
uniform 	float _humid;
uniform 	vec4 Tenkoku_Vec_SunFwd;
uniform 	vec4 Tenkoku_Vec_MoonFwd;
uniform 	vec4 Tenkoku_Vec_LightningFwd;
uniform 	float Tenkoku_LightningLightIntensity;
uniform 	vec4 Tenkoku_LightningColor;
uniform 	vec4 _TenkokuSunColor;
uniform 	vec4 Tenkoku_MoonLightColor;
uniform 	vec4 _TenkokuCloudColor;
uniform 	vec4 _TenkokuCloudAmbientColor;
uniform 	float _Tenkoku_Ambient;
uniform 	float _Tenkoku_AmbientGI;
uniform 	vec4 _Tenkoku_overcastColor;
uniform 	float _Tenkoku_overcastAmt;
uniform 	float _cS;
uniform 	float _tenkokuTimer;
uniform 	float _tenkokuNoiseTimer;
uniform 	float _Tenkoku_UseElek;
UNITY_LOCATION(0) uniform  sampler2D _Tenkoku_SkyTex;
UNITY_LOCATION(1) uniform  sampler2D _Tenkoku_SkyBox;
UNITY_LOCATION(2) uniform  sampler3D _NoiseTex1;
UNITY_LOCATION(3) uniform  sampler3D _NoiseTex2;
UNITY_LOCATION(4) uniform  sampler2D _CloudTex1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat16_6;
vec4 u_xlat7;
vec4 u_xlat16_7;
vec3 u_xlat8;
vec4 u_xlat16_8;
vec4 u_xlat9;
vec4 u_xlat16_9;
vec3 u_xlat10;
vec4 u_xlat16_10;
vec4 u_xlat11;
vec4 u_xlat16_11;
vec3 u_xlat12;
vec4 u_xlat16_12;
vec3 u_xlat13;
vec4 u_xlat16_13;
vec3 u_xlat14;
vec4 u_xlat16_14;
vec2 u_xlat16;
bool u_xlatb16;
vec3 u_xlat19;
vec3 u_xlat22;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
vec3 u_xlat26;
float u_xlat28;
vec2 u_xlat31;
int u_xlati31;
bvec2 u_xlatb31;
vec2 u_xlat34;
vec2 u_xlat35;
bool u_xlatb35;
float u_xlat37;
float u_xlat38;
float u_xlat39;
bool u_xlatb39;
float u_xlat40;
int u_xlati40;
bool u_xlatb40;
float u_xlat43;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
int u_xlati46;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
int u_xlati49;
float u_xlat50;
bool u_xlatb50;
float u_xlat51;
bool u_xlatb51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
bool u_xlatb54;
float u_xlat55;
int u_xlati56;
float u_xlat57;
bool u_xlatb57;
void main()
{
    u_xlat0.xyz = max(vs_TEXCOORD2.xyw, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlatb1.xy = equal(vec4(_Tenkoku_UseElek), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    if(u_xlatb1.x){
        u_xlat1.xz = u_xlat0.xy / u_xlat0.zz;
        u_xlat10_2 = texture(_Tenkoku_SkyTex, u_xlat1.xz);
    } else {
        u_xlat16_2.x = float(1.0);
        u_xlat16_2.y = float(1.0);
        u_xlat16_2.z = float(1.0);
    }
    if(u_xlatb1.y){
        u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
        u_xlat16_2 = texture(_Tenkoku_SkyBox, u_xlat0.xy);
    }
    u_xlat0.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlatb45 = (-vs_TEXCOORD1.y)<0.00999999978;
    u_xlatb1.x = 0.0>=_FarDist;
    u_xlatb45 = u_xlatb45 || u_xlatb1.x;
    if(u_xlatb45){
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 0.0;
        return;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(vec2(_tenkokuTimer, _tenkokuTimer));
    u_xlat3.xyz = vec3(vec3(_Darkness, _Darkness, _Darkness)) * (-u_xlat0.xyz) + u_xlat0.xyz;
    u_xlat45 = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat1.xy);
    u_xlat45 = sin(u_xlat45);
    u_xlat45 = u_xlat45 * 43758.5469;
    u_xlat45 = fract(u_xlat45);
    u_xlatb31.x = 0.0<_NoiseBias;
    if(u_xlatb31.x){
        u_xlat31.xy = trunc(vec2(_SampleCount1, _SampleCount0));
        u_xlat46 = (-u_xlat31.x) + u_xlat31.y;
        u_xlat31.x = (-vs_TEXCOORD1.y) * u_xlat46 + u_xlat31.x;
        u_xlati46 = int(u_xlat31.x);
        u_xlat47 = _Altitude0 / (-vs_TEXCOORD1.y);
        u_xlat48 = _Altitude1 / (-vs_TEXCOORD1.y);
        u_xlat48 = (-u_xlat47) + u_xlat48;
        u_xlat31.x = trunc(u_xlat31.x);
        u_xlat4.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = u_xlat45 * u_xlat48;
        u_xlat31.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = dot((-vs_TEXCOORD1.xyz), Tenkoku_Vec_SunFwd.xyz);
        u_xlat19.x = (-_HGCoeff) * _HGCoeff + 1.0;
        u_xlat19.x = u_xlat19.x * 0.5;
        u_xlat34.x = _HGCoeff * _HGCoeff + 1.0;
        u_xlat48 = (-_HGCoeff) * u_xlat48 + u_xlat34.x;
        u_xlat48 = u_xlat48 * u_xlat48;
        u_xlat48 = u_xlat19.x / u_xlat48;
        u_xlat19.x = u_xlat48 * 6.0 + -3.0;
        u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
        u_xlat48 = u_xlat48 + u_xlat19.x;
        u_xlat31.x = u_xlat31.x + u_xlat47;
        u_xlat5.xz = _WorldSpaceCameraPos.xz;
        u_xlat5.y = 0.0;
        u_xlat19.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat5.xyz;
        u_xlatb31.x = 0.275000006<_Tenkoku_overcastAmt;
        u_xlati31 = (u_xlatb31.x) ? 4 : u_xlati46;
        u_xlat5.xyz = _Scroll1.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat6.xyz = _Scroll2.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat46 = _NoiseBias * 2.55000019 + -0.400000006;
        u_xlat47 = (-_Altitude0) + _Altitude1;
        u_xlat7.xy = vec2(u_xlat47) * vec2(0.100000001, 0.400000006);
        u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
        u_xlat50 = float(_SampleCountL);
        u_xlat51 = u_xlat50 * Tenkoku_Vec_SunFwd.y;
        u_xlat37 = _Extinct * -0.75;
        u_xlat8.xyz = u_xlat19.xyz;
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = float(0.0);
        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati31 ; u_xlati_loop_1++)
        {
            u_xlat10.xyz = u_xlat8.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
            u_xlat10.xyz = u_xlat10.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat8.xyz * vec3(_NoiseFreq2);
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat10.xyz = u_xlat10.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat16_10 = textureLod(_NoiseTex1, u_xlat10.xyz, 0.0);
            u_xlat16_11 = textureLod(_NoiseTex2, u_xlat11.xyz, 0.0);
            u_xlat39 = u_xlat16_11.w * _NoiseAmp2;
            u_xlat39 = u_xlat16_10.w * _NoiseAmp1 + u_xlat39;
            u_xlat39 = u_xlat46 + u_xlat39;
            u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
            u_xlat54 = u_xlat8.y + (-_Altitude0);
            u_xlat10.x = u_xlat7.x * u_xlat54;
            u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
            u_xlat25 = u_xlat10.x * -2.0 + 3.0;
            u_xlat10.x = u_xlat10.x * u_xlat10.x;
            u_xlat10.x = u_xlat10.x * u_xlat25;
            u_xlat39 = u_xlat39 * u_xlat10.x;
            u_xlat54 = u_xlat47 + (-u_xlat54);
            u_xlat54 = u_xlat7.y * u_xlat54;
            u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
            u_xlat10.x = u_xlat54 * -2.0 + 3.0;
            u_xlat54 = u_xlat54 * u_xlat54;
            u_xlat54 = u_xlat54 * u_xlat10.x;
            u_xlat39 = u_xlat54 * u_xlat39;
            u_xlatb54 = _Edge<u_xlat39;
            if(u_xlatb54){
                u_xlat54 = u_xlat4.x * u_xlat39;
                u_xlat10.x = float(u_xlati_loop_1);
                u_xlat10.xy = u_xlat1.xy + u_xlat10.xx;
                u_xlat10.x = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat10.xy);
                u_xlat10.x = sin(u_xlat10.x);
                u_xlat10.x = u_xlat10.x * 43758.5469;
                u_xlat10.x = fract(u_xlat10.x);
                u_xlat54 = u_xlat54 * _Scatter;
                u_xlat54 = u_xlat48 * u_xlat54;
                u_xlat25 = (-u_xlat8.y) + _Altitude1;
                u_xlat40 = u_xlat25 / u_xlat51;
                u_xlat11.xyz = vec3(u_xlat40) * Tenkoku_Vec_SunFwd.xyz;
                u_xlat11.xyz = u_xlat11.xyz * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat11.xyz;
                u_xlat55 = 0.0;
                for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<_SampleCountL ; u_xlati_loop_2++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat55 = u_xlat57 * u_xlat40 + u_xlat55;
                    u_xlat12.xyz = Tenkoku_Vec_SunFwd.xyz * vec3(u_xlat40) + u_xlat12.xyz;
                }
                u_xlatb40 = 0.100000001>=u_xlat55;
                u_xlat40 = (u_xlatb40) ? 0.0 : u_xlat55;
                u_xlat11.x = u_xlat40 * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat40 = u_xlat37 * u_xlat40;
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat40 = (-u_xlat40) + 1.0;
                u_xlat40 = u_xlat40 * u_xlat11.x;
                u_xlat40 = u_xlat54 * u_xlat40;
                u_xlat40 = u_xlat40 * _TenkokuCloudColor.x;
                u_xlat11.x = u_xlat9.x * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat26.x = u_xlat37 * u_xlat9.x;
                u_xlat26.x = u_xlat26.x * 1.44269502;
                u_xlat26.x = exp2(u_xlat26.x);
                u_xlat26.x = (-u_xlat26.x) + 1.0;
                u_xlat11.x = u_xlat26.x * u_xlat11.x;
                u_xlat52 = u_xlat40 * u_xlat11.x + u_xlat52;
                u_xlat25 = u_xlat25 / u_xlat50;
                u_xlat26.xy = vec2(u_xlat25) * vec2(1.0, 0.0);
                u_xlat26.xyz = u_xlat26.yxy * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat26.xyz;
                u_xlat10.x = float(0.0);
                for(int u_xlati_loop_3 = int(0) ; u_xlati_loop_3<_SampleCountL ; u_xlati_loop_3++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat10.x = u_xlat57 * u_xlat25 + u_xlat10.x;
                    u_xlat12.xyz = vec3(u_xlat25) * vec3(0.0, 1.0, 0.0) + u_xlat12.xyz;
                }
                u_xlatb25 = 0.100000001>=u_xlat10.x;
                u_xlat25 = (u_xlatb25) ? 0.0 : u_xlat10.x;
                u_xlat40 = u_xlat25 * (-_Extinct);
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat25 = u_xlat37 * u_xlat25;
                u_xlat25 = u_xlat25 * 1.44269502;
                u_xlat25 = exp2(u_xlat25);
                u_xlat25 = (-u_xlat25) + 1.0;
                u_xlat25 = u_xlat25 * u_xlat40;
                u_xlat54 = u_xlat54 * u_xlat25;
                u_xlat53 = u_xlat54 * u_xlat11.x + u_xlat53;
                u_xlat9.x = u_xlat39 * u_xlat4.x + u_xlat9.x;
            }
            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat8.xyz;
        }
    } else {
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = 0.0;
    }
    u_xlat1.x = u_xlat9.x * 1.25;
    u_xlat1.x = u_xlat1.x * (-_Extinct);
    u_xlat1.x = u_xlat1.x * 1.44269502;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat16.x = u_xlat1.x * u_xlat0.x + u_xlat52;
    u_xlatb31.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_NoiseBias2, _NoiseBias3, _NoiseBias2, _NoiseBias3)).xy;
    if(u_xlatb31.x){
        u_xlat4.xy = vec2(_Altitude2, _Altitude3) / (-vs_TEXCOORD1.yy);
        u_xlat31.x = (-u_xlat4.x) + u_xlat4.y;
        u_xlat47 = u_xlat31.x * 0.0500000007;
        u_xlat31.x = u_xlat45 * u_xlat31.x;
        u_xlat31.x = u_xlat31.x * 0.0500000007 + u_xlat4.x;
        u_xlat4.xz = _WorldSpaceCameraPos.xz;
        u_xlat4.y = 0.0;
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat4.xyz;
        u_xlat5.xyz = vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer)) * vec3(1.39999998, 0.0, 0.349999994);
        u_xlat6.xyz = u_xlat5.xyz * _Scroll1.xyz;
        u_xlat5.xyz = u_xlat5.xyz * _Scroll2.xyz;
        u_xlat7 = vec4(_NoiseBias2) * vec4(1.29999995, 4.9000001, 24.0, 2.5) + vec4(0.200000003, 0.100000001, 20.0, 0.300000012);
        u_xlat31.x = (-_Altitude2) + _Altitude3;
        u_xlat8.xy = u_xlat31.xx * vec2(0.100000001, 0.400000006);
        u_xlat8.xy = vec2(1.0, 1.0) / u_xlat8.xy;
        u_xlat9 = u_xlat6.xzxz * vec4(0.5, 0.5, 0.5, 0.5);
        u_xlat10.xyz = u_xlat4.xyz;
        u_xlat48 = 0.0;
        for(int u_xlati_loop_4 = 0 ; u_xlati_loop_4<4 ; u_xlati_loop_4++)
        {
            u_xlat11.xyz = u_xlat7.xxx * u_xlat10.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat12.xyz = u_xlat7.yyy * u_xlat10.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat13.xyz = u_xlat7.zzz * u_xlat10.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(1.0, 4.0, 1.0);
            u_xlat16_11 = textureLod(_NoiseTex1, u_xlat11.xyz, 0.0);
            u_xlat16_12 = textureLod(_NoiseTex2, u_xlat12.xyz, 0.0);
            u_xlat16_13 = textureLod(_NoiseTex2, u_xlat13.xyz, 0.0);
            u_xlat50 = u_xlat16_13.w * _NoiseAmp2;
            u_xlat50 = u_xlat16_12.w * _NoiseAmp1 + u_xlat50;
            u_xlat50 = (-u_xlat16_11.w) * 0.800000012 + u_xlat50;
            u_xlat50 = u_xlat7.w + u_xlat50;
            u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
            u_xlat51 = u_xlat10.y + (-_Altitude2);
            u_xlat38 = u_xlat8.x * u_xlat51;
            u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
            u_xlat55 = u_xlat38 * -2.0 + 3.0;
            u_xlat38 = u_xlat38 * u_xlat38;
            u_xlat38 = u_xlat38 * u_xlat55;
            u_xlat50 = u_xlat50 * u_xlat38;
            u_xlat51 = u_xlat31.x + (-u_xlat51);
            u_xlat51 = u_xlat8.y * u_xlat51;
            u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
            u_xlat38 = u_xlat51 * -2.0 + 3.0;
            u_xlat51 = u_xlat51 * u_xlat51;
            u_xlat51 = u_xlat51 * u_xlat38;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlat11 = u_xlat10.xzxz * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat9;
            u_xlat16_12 = textureLod(_CloudTex1, u_xlat11.xy, 0.0);
            u_xlat16_11 = textureLod(_CloudTex1, u_xlat11.zw, 0.0);
            u_xlat51 = (-u_xlat16_11.y) + u_xlat16_12.z;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlatb51 = _Edge<u_xlat50;
            if(u_xlatb51){
                u_xlat48 = u_xlat50 * u_xlat47 + u_xlat48;
            }
            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat47) + u_xlat10.xyz;
        }
    } else {
        u_xlat48 = 0.0;
    }
    u_xlat1.z = u_xlat48 * (-_Extinct);
    u_xlat1.xz = u_xlat1.xz * vec2(8.0, 1.44269502);
    u_xlat31.x = exp2(u_xlat1.z);
    u_xlat3.xyz = u_xlat31.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat47 = _Altitude4 / (-vs_TEXCOORD1.y);
    u_xlat48 = _Altitude5 / (-vs_TEXCOORD1.y);
    u_xlat48 = (-u_xlat47) + u_xlat48;
    u_xlat45 = u_xlat45 * u_xlat48;
    u_xlat45 = u_xlat45 * 0.0199999996 + u_xlat47;
    u_xlat4.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + _WorldSpaceCameraPos.xz;
    if(u_xlatb31.y){
        u_xlat45 = u_xlat48 * 0.0199999996;
        u_xlat34.xy = _Scroll1.xz * vec2(vec2(_tenkokuTimer, _tenkokuTimer));
        u_xlat34.xy = u_xlat34.xy * vec2(0.224999994, 0.0375000015);
        u_xlat46 = _NoiseBias3 * 1.35000002 + -0.100000001;
        u_xlat5.xy = u_xlat4.xy;
        u_xlat47 = 0.0;
        for(int u_xlati_loop_5 = 0 ; u_xlati_loop_5<4 ; u_xlati_loop_5++)
        {
            u_xlat35.xy = u_xlat5.xy * vec2(vec2(_cS, _cS));
            u_xlat6 = u_xlat35.xyxy * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat34.xyxy;
            u_xlat35.xy = u_xlat35.xy * vec2(9.99999975e-06, 9.99999975e-06) + u_xlat34.xy;
            u_xlat16_7 = textureLod(_CloudTex1, u_xlat6.xy, 0.0);
            u_xlat16_6 = textureLod(_CloudTex1, u_xlat6.zw, 0.0);
            u_xlat16_9 = textureLod(_CloudTex1, u_xlat35.xy, 0.0);
            u_xlat35.x = u_xlat16_6.y + u_xlat16_9.w;
            u_xlat35.x = (-u_xlat16_7.z) * 1.20000005 + u_xlat35.x;
            u_xlat35.x = u_xlat46 + u_xlat35.x;
            u_xlat35.x = clamp(u_xlat35.x, 0.0, 1.0);
            u_xlat47 = u_xlat35.x * u_xlat45 + u_xlat47;
            u_xlat5.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + u_xlat5.xy;
        }
    } else {
        u_xlat47 = 0.0;
    }
    u_xlat45 = u_xlat47 * (-_Extinct);
    u_xlat45 = u_xlat45 * 2.88539004;
    u_xlat45 = exp2(u_xlat45);
    u_xlat46 = dot((-vs_TEXCOORD1.xyz), (-vs_TEXCOORD1.xyz));
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * (-vs_TEXCOORD1.xyz);
    u_xlat47 = dot(u_xlat5.xyz, Tenkoku_Vec_SunFwd.xyz);
    u_xlat48 = dot(u_xlat5.xyz, Tenkoku_Vec_MoonFwd.xyz);
    u_xlat34.x = u_xlat47 * 2.0 + -0.75;
    u_xlat34.x = clamp(u_xlat34.x, 0.0, 1.0);
    u_xlat49 = u_xlat47 * 10.0 + -8.75;
    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
    u_xlat47 = u_xlat47 + 0.899999976;
    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
    u_xlat6.xyz = vec3(u_xlat48) + vec3(-0.400000006, -0.100000001, -0.00999999978);
    u_xlat6.xyz = u_xlat6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
    u_xlat48 = max(_TenkokuSunColor.y, _TenkokuSunColor.x);
    u_xlat48 = max(u_xlat48, _TenkokuSunColor.z);
    u_xlat48 = (-u_xlat48) + 1.0;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat7.xy = vec2(vec2(_NoiseBias, _NoiseBias)) * vec2(-0.150000036, -0.299999982) + vec2(0.600000024, 0.699999988);
    u_xlat8.xyz = u_xlat7.xxx * _TenkokuCloudColor.xyz;
    u_xlat9.xyz = (-_TenkokuCloudColor.xyz) * u_xlat7.xxx + _TenkokuCloudColor.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat8.xyz * _Tenkoku_overcastColor.xyz + (-u_xlat8.xyz);
    u_xlat8.xyz = vec3(_Tenkoku_overcastAmt) * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat53) * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat1.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat7.yyy * u_xlat8.xyz;
    u_xlat22.xyz = (-u_xlat8.xyz) * u_xlat7.yyy + u_xlat8.xyz;
    u_xlat22.xyz = vec3(u_xlat53) * u_xlat22.xyz + u_xlat9.xyz;
    u_xlat8.xyz = _TenkokuCloudAmbientColor.xyz * vec3(_Tenkoku_Ambient);
    u_xlat9.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16.x = (-u_xlat47) + u_xlat53;
    u_xlat16.x = u_xlat16.x + 1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat8.xyz = (-u_xlat8.xyz) * vec3(0.5, 0.5, 0.5) + u_xlat22.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat9.xyz;
    u_xlat22.xyz = u_xlat22.xyz + (-u_xlat8.xyz);
    u_xlat22.xyz = vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) * u_xlat22.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat22.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
    u_xlat16.x = _TenkokuCloudAmbientColor.w * -0.300000012 + 1.0;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.5, 2.5, 2.5) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat1.y = u_xlat31.x * u_xlat34.x;
    u_xlat1.xy = u_xlat1.xy * vec2(3.0, 1.5);
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.20000005, 2.20000005, 2.20000005) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat1.yyy * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat16.x = u_xlat31.x * u_xlat49;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(5.4000001, 5.4000001, 5.4000001) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat31.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat3.xyz * vec3(1.20000005, 1.20000005, 1.20000005);
    u_xlat10.xyz = vec3(u_xlat45) * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyw = u_xlat6.yyy * u_xlat10.xyz;
    u_xlat6.xyw = vec3(u_xlat48) * u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(0.100000001, 0.100000001, 0.100000001);
    u_xlat6.xyw = _TenkokuCloudAmbientColor.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) + u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat16.x = u_xlat31.x * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat45 = min(u_xlat45, 1.0);
    u_xlat10.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat6.xyw);
    u_xlat6.xyw = vec3(u_xlat45) * u_xlat10.xyz + u_xlat6.xyw;
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(1.20000005, 1.20000005, 1.20000005) + u_xlat6.xyw;
    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat9.xyz;
    u_xlat3.xyz = (-u_xlat22.xyz) * vec3(1.39999998, 1.39999998, 1.39999998) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat8.xyz;
    u_xlat31.x = (-_NoiseBias3) + 1.0;
    u_xlat47 = (-u_xlat1.x) + 1.0;
    u_xlat47 = (-u_xlat31.x) + u_xlat47;
    u_xlat31.x = _NoiseBias3 * u_xlat47 + u_xlat31.x;
    u_xlat45 = u_xlat45 + u_xlat31.x;
    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
    u_xlat45 = u_xlat45 + -0.100000001;
    u_xlat45 = u_xlat16.x * u_xlat45 + 0.100000001;
    u_xlat16.xy = u_xlat4.xy * vec2(vec2(_cS, _cS));
    u_xlat4.xy = vec2(_Tenkoku_overcastAmt, _tenkokuTimer) + vec2(_Tenkoku_overcastAmt, _tenkokuTimer);
    u_xlat19.xy = u_xlat4.yy * _Scroll1.xz;
    u_xlat16.xy = u_xlat16.xy * vec2(2.99999992e-05, 2.99999992e-05) + u_xlat19.xy;
    u_xlat16_8 = textureLod(_CloudTex1, u_xlat16.xy, 0.0);
    u_xlat16.x = max(_TenkokuCloudColor.y, _TenkokuCloudColor.x);
    u_xlat16.x = max(u_xlat16.x, _TenkokuCloudColor.z);
    u_xlat19.xyz = u_xlat16.xxx + (-_TenkokuCloudColor.xyz);
    u_xlat19.xyz = u_xlat19.xyz * vec3(0.649999976, 0.649999976, 0.649999976) + _TenkokuCloudColor.xyz;
    u_xlat6.xyw = u_xlat7.xxx * u_xlat19.xyz;
    u_xlat8.x = u_xlat16_8.x;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat19.xyz = (-u_xlat19.xyz) * u_xlat7.xxx + u_xlat19.xyz;
    u_xlat19.xyz = u_xlat8.xxx * u_xlat19.xyz + u_xlat6.xyw;
    u_xlat16.x = _Tenkoku_overcastAmt * -0.5 + 1.0;
    u_xlat6.xyw = u_xlat19.xyz * _Tenkoku_overcastColor.xyz;
    u_xlat4.x = u_xlat4.x;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat6.xyw * u_xlat16.xxx + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat4.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat16.x = 1900.0 / (-vs_TEXCOORD1.y);
    u_xlat16.x = u_xlat16.x / _FarDist;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat16.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat6.xyz = u_xlat6.zzz * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyz = vec3(u_xlat48) * u_xlat6.xyz;
    u_xlat19.xyz = u_xlat6.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat19.xyz;
    u_xlat19.xyz = (-u_xlat3.xyz) + u_xlat19.xyz;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat19.xyz + u_xlat3.xyz;
    u_xlatb16 = 0.0<Tenkoku_LightningLightIntensity;
    u_xlat31.x = dot(Tenkoku_Vec_LightningFwd.xyz, u_xlat5.xyz);
    u_xlat31.x = clamp(u_xlat31.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat31.xxx + vec3(-0.300000012, -0.649999976, -0.999899983);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = vec3(Tenkoku_LightningLightIntensity) * Tenkoku_LightningColor.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(0.25, 0.25, 0.25) + u_xlat3.xyz;
    u_xlat4.xy = u_xlat4.xy * vec2(0.25, 0.5);
    u_xlat31.x = u_xlat4.y + u_xlat4.x;
    u_xlat31.x = u_xlat4.z * 3000.0 + u_xlat31.x;
    u_xlat4.xyz = u_xlat31.xxx * Tenkoku_LightningColor.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(Tenkoku_LightningLightIntensity) + u_xlat5.xyz;
    u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat16.x = (-vs_TEXCOORD1.y) * u_xlat46 + -0.0250000004;
    u_xlat16.x = u_xlat16.x * 3.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat3.xyz = (-u_xlat10_2.xyz) * vec3(0.800000012, 0.800000012, 0.800000012) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16.x = _humid * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat16.xxx * u_xlat2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(1.25, 1.25, 1.25);
    SV_Target0.w = (-u_xlat1.x) * u_xlat45 + 1.0;
    return;
}
-------- failed compiling:
fragment evaluation shader
GLSL compilation failed for shader TENKOKU/cloud_sphere:
0(149) : error C1503: undefined variable "u_xlat10_2"
0(159) : error C1503: undefined variable "u_xlat10_2"
0(531) : error C1503: undefined variable "u_xlat10_2"
0(555) : error C1503: undefined variable "u_xlat10_2"
0(592) : error C1503: undefined variable "u_xlat10_2"
0(615) : error C1503: undefined variable "u_xlat10_2"
0(619) : error C1503: undefined variable "u_xlat10_2"
Note: Creation of internal variant of shader 'TENKOKU/cloud_sphere' failed.
Refreshing native plugins compatible for Editor in 1.69 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 4633 Unused Serialized files (Serialized files now loaded: 0)
Unloading 55 unused Assets / (13.9 MB). Loaded Objects now: 5485.
Memory consumption went from 380.7 MB to 366.8 MB.
Total: 5.660921 ms (FindLiveObjects: 0.346274 ms CreateObjectMapping: 0.284892 ms MarkObjects: 3.018441 ms  DeleteObjects: 2.010634 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
========================================================================
Received Prepare
Registering precompiled user dll's ...
Registered in 0.001984 seconds.
Begin MonoManager ReloadAssembly
Symbol file LoadedFromMemory is not a mono symbol file
Native extension for LinuxStandalone target not found
Native extension for Android target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 1.27 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  6.272 seconds
Domain Reload Profiling:
	ReloadAssembly (6273ms)
		BeginReloadAssembly (119ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (5ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (34ms)
		EndReloadAssembly (6035ms)
			LoadAssemblies (81ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (256ms)
			ReleaseScriptCaches (2ms)
			RebuildScriptCaches (59ms)
			SetupLoadedEditorAssemblies (5589ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (19ms)
				SetLoadedEditorAssemblies (1ms)
				RefreshPlugins (1ms)
				BeforeProcessingInitializeOnLoad (59ms)
				ProcessInitializeOnLoadAttributes (5405ms)
				ProcessInitializeOnLoadMethodAttributes (99ms)
				AfterProcessingInitializeOnLoad (4ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (6ms)
Platform modules already initialized, skipping
State comes from an incompatible keyword space
State comes from an incompatible keyword space
Shader 'Hidden/BOXOPHOBIC/The Vegetation Engine/Helpers/Debug': dependency 'LightMode' shader 'ForwardBase' not found
-------- Shader TENKOKU/cloud_sphere compilation failed
#version 450
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _SampleCount0;
uniform 	float _SampleCount1;
uniform 	int _SampleCountL;
uniform 	float _NoiseFreq1;
uniform 	float _NoiseFreq2;
uniform 	float _NoiseAmp1;
uniform 	float _NoiseAmp2;
uniform 	float _NoiseBias;
uniform 	float _NoiseBias2;
uniform 	float _NoiseBias3;
uniform 	vec3 _Scroll1;
uniform 	vec3 _Scroll2;
uniform 	float _Altitude0;
uniform 	float _Altitude1;
uniform 	float _Altitude2;
uniform 	float _Altitude3;
uniform 	float _Altitude4;
uniform 	float _Altitude5;
uniform 	float _FarDist;
uniform 	float _Scatter;
uniform 	float _HGCoeff;
uniform 	float _Extinct;
uniform 	float _Edge;
uniform 	float _Darkness;
uniform 	float _humid;
uniform 	vec4 Tenkoku_Vec_SunFwd;
uniform 	vec4 Tenkoku_Vec_MoonFwd;
uniform 	vec4 Tenkoku_Vec_LightningFwd;
uniform 	float Tenkoku_LightningLightIntensity;
uniform 	vec4 Tenkoku_LightningColor;
uniform 	vec4 _TenkokuSunColor;
uniform 	vec4 Tenkoku_MoonLightColor;
uniform 	vec4 _TenkokuCloudColor;
uniform 	vec4 _TenkokuCloudAmbientColor;
uniform 	float _Tenkoku_Ambient;
uniform 	float _Tenkoku_AmbientGI;
uniform 	vec4 _Tenkoku_overcastColor;
uniform 	float _Tenkoku_overcastAmt;
uniform 	float _cS;
uniform 	float _tenkokuTimer;
uniform 	float _tenkokuNoiseTimer;
uniform 	float _Tenkoku_UseElek;
UNITY_LOCATION(0) uniform  sampler2D _Tenkoku_SkyTex;
UNITY_LOCATION(1) uniform  sampler2D _Tenkoku_SkyBox;
UNITY_LOCATION(2) uniform  sampler3D _NoiseTex1;
UNITY_LOCATION(3) uniform  sampler3D _NoiseTex2;
UNITY_LOCATION(4) uniform  sampler2D _CloudTex1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat16_6;
vec4 u_xlat7;
vec4 u_xlat16_7;
vec3 u_xlat8;
vec4 u_xlat16_8;
vec4 u_xlat9;
vec4 u_xlat16_9;
vec3 u_xlat10;
vec4 u_xlat16_10;
vec4 u_xlat11;
vec4 u_xlat16_11;
vec3 u_xlat12;
vec4 u_xlat16_12;
vec3 u_xlat13;
vec4 u_xlat16_13;
vec3 u_xlat14;
vec4 u_xlat16_14;
vec2 u_xlat16;
bool u_xlatb16;
vec3 u_xlat19;
vec3 u_xlat22;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
vec3 u_xlat26;
float u_xlat28;
vec2 u_xlat31;
int u_xlati31;
bvec2 u_xlatb31;
vec2 u_xlat34;
vec2 u_xlat35;
bool u_xlatb35;
float u_xlat37;
float u_xlat38;
float u_xlat39;
bool u_xlatb39;
float u_xlat40;
int u_xlati40;
bool u_xlatb40;
float u_xlat43;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
int u_xlati46;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
int u_xlati49;
float u_xlat50;
bool u_xlatb50;
float u_xlat51;
bool u_xlatb51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
bool u_xlatb54;
float u_xlat55;
int u_xlati56;
float u_xlat57;
bool u_xlatb57;
void main()
{
    u_xlat0.xyz = max(vs_TEXCOORD2.xyw, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlatb1.xy = equal(vec4(_Tenkoku_UseElek), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    if(u_xlatb1.x){
        u_xlat1.xz = u_xlat0.xy / u_xlat0.zz;
        u_xlat10_2 = texture(_Tenkoku_SkyTex, u_xlat1.xz);
    } else {
        u_xlat16_2.x = float(1.0);
        u_xlat16_2.y = float(1.0);
        u_xlat16_2.z = float(1.0);
    }
    if(u_xlatb1.y){
        u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
        u_xlat16_2 = texture(_Tenkoku_SkyBox, u_xlat0.xy);
    }
    u_xlat0.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlatb45 = (-vs_TEXCOORD1.y)<0.00999999978;
    u_xlatb1.x = 0.0>=_FarDist;
    u_xlatb45 = u_xlatb45 || u_xlatb1.x;
    if(u_xlatb45){
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 0.0;
        return;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(vec2(_tenkokuTimer, _tenkokuTimer));
    u_xlat3.xyz = vec3(vec3(_Darkness, _Darkness, _Darkness)) * (-u_xlat0.xyz) + u_xlat0.xyz;
    u_xlat45 = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat1.xy);
    u_xlat45 = sin(u_xlat45);
    u_xlat45 = u_xlat45 * 43758.5469;
    u_xlat45 = fract(u_xlat45);
    u_xlatb31.x = 0.0<_NoiseBias;
    if(u_xlatb31.x){
        u_xlat31.xy = trunc(vec2(_SampleCount1, _SampleCount0));
        u_xlat46 = (-u_xlat31.x) + u_xlat31.y;
        u_xlat31.x = (-vs_TEXCOORD1.y) * u_xlat46 + u_xlat31.x;
        u_xlati46 = int(u_xlat31.x);
        u_xlat47 = _Altitude0 / (-vs_TEXCOORD1.y);
        u_xlat48 = _Altitude1 / (-vs_TEXCOORD1.y);
        u_xlat48 = (-u_xlat47) + u_xlat48;
        u_xlat31.x = trunc(u_xlat31.x);
        u_xlat4.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = u_xlat45 * u_xlat48;
        u_xlat31.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = dot((-vs_TEXCOORD1.xyz), Tenkoku_Vec_SunFwd.xyz);
        u_xlat19.x = (-_HGCoeff) * _HGCoeff + 1.0;
        u_xlat19.x = u_xlat19.x * 0.5;
        u_xlat34.x = _HGCoeff * _HGCoeff + 1.0;
        u_xlat48 = (-_HGCoeff) * u_xlat48 + u_xlat34.x;
        u_xlat48 = u_xlat48 * u_xlat48;
        u_xlat48 = u_xlat19.x / u_xlat48;
        u_xlat19.x = u_xlat48 * 6.0 + -3.0;
        u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
        u_xlat48 = u_xlat48 + u_xlat19.x;
        u_xlat31.x = u_xlat31.x + u_xlat47;
        u_xlat5.xz = _WorldSpaceCameraPos.xz;
        u_xlat5.y = 0.0;
        u_xlat19.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat5.xyz;
        u_xlatb31.x = 0.275000006<_Tenkoku_overcastAmt;
        u_xlati31 = (u_xlatb31.x) ? 4 : u_xlati46;
        u_xlat5.xyz = _Scroll1.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat6.xyz = _Scroll2.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat46 = _NoiseBias * 2.55000019 + -0.400000006;
        u_xlat47 = (-_Altitude0) + _Altitude1;
        u_xlat7.xy = vec2(u_xlat47) * vec2(0.100000001, 0.400000006);
        u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
        u_xlat50 = float(_SampleCountL);
        u_xlat51 = u_xlat50 * Tenkoku_Vec_SunFwd.y;
        u_xlat37 = _Extinct * -0.75;
        u_xlat8.xyz = u_xlat19.xyz;
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = float(0.0);
        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati31 ; u_xlati_loop_1++)
        {
            u_xlat10.xyz = u_xlat8.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
            u_xlat10.xyz = u_xlat10.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat8.xyz * vec3(_NoiseFreq2);
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat10.xyz = u_xlat10.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat16_10 = textureLod(_NoiseTex1, u_xlat10.xyz, 0.0);
            u_xlat16_11 = textureLod(_NoiseTex2, u_xlat11.xyz, 0.0);
            u_xlat39 = u_xlat16_11.w * _NoiseAmp2;
            u_xlat39 = u_xlat16_10.w * _NoiseAmp1 + u_xlat39;
            u_xlat39 = u_xlat46 + u_xlat39;
            u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
            u_xlat54 = u_xlat8.y + (-_Altitude0);
            u_xlat10.x = u_xlat7.x * u_xlat54;
            u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
            u_xlat25 = u_xlat10.x * -2.0 + 3.0;
            u_xlat10.x = u_xlat10.x * u_xlat10.x;
            u_xlat10.x = u_xlat10.x * u_xlat25;
            u_xlat39 = u_xlat39 * u_xlat10.x;
            u_xlat54 = u_xlat47 + (-u_xlat54);
            u_xlat54 = u_xlat7.y * u_xlat54;
            u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
            u_xlat10.x = u_xlat54 * -2.0 + 3.0;
            u_xlat54 = u_xlat54 * u_xlat54;
            u_xlat54 = u_xlat54 * u_xlat10.x;
            u_xlat39 = u_xlat54 * u_xlat39;
            u_xlatb54 = _Edge<u_xlat39;
            if(u_xlatb54){
                u_xlat54 = u_xlat4.x * u_xlat39;
                u_xlat10.x = float(u_xlati_loop_1);
                u_xlat10.xy = u_xlat1.xy + u_xlat10.xx;
                u_xlat10.x = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat10.xy);
                u_xlat10.x = sin(u_xlat10.x);
                u_xlat10.x = u_xlat10.x * 43758.5469;
                u_xlat10.x = fract(u_xlat10.x);
                u_xlat54 = u_xlat54 * _Scatter;
                u_xlat54 = u_xlat48 * u_xlat54;
                u_xlat25 = (-u_xlat8.y) + _Altitude1;
                u_xlat40 = u_xlat25 / u_xlat51;
                u_xlat11.xyz = vec3(u_xlat40) * Tenkoku_Vec_SunFwd.xyz;
                u_xlat11.xyz = u_xlat11.xyz * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat11.xyz;
                u_xlat55 = 0.0;
                for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<_SampleCountL ; u_xlati_loop_2++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat55 = u_xlat57 * u_xlat40 + u_xlat55;
                    u_xlat12.xyz = Tenkoku_Vec_SunFwd.xyz * vec3(u_xlat40) + u_xlat12.xyz;
                }
                u_xlatb40 = 0.100000001>=u_xlat55;
                u_xlat40 = (u_xlatb40) ? 0.0 : u_xlat55;
                u_xlat11.x = u_xlat40 * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat40 = u_xlat37 * u_xlat40;
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat40 = (-u_xlat40) + 1.0;
                u_xlat40 = u_xlat40 * u_xlat11.x;
                u_xlat40 = u_xlat54 * u_xlat40;
                u_xlat40 = u_xlat40 * _TenkokuCloudColor.x;
                u_xlat11.x = u_xlat9.x * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat26.x = u_xlat37 * u_xlat9.x;
                u_xlat26.x = u_xlat26.x * 1.44269502;
                u_xlat26.x = exp2(u_xlat26.x);
                u_xlat26.x = (-u_xlat26.x) + 1.0;
                u_xlat11.x = u_xlat26.x * u_xlat11.x;
                u_xlat52 = u_xlat40 * u_xlat11.x + u_xlat52;
                u_xlat25 = u_xlat25 / u_xlat50;
                u_xlat26.xy = vec2(u_xlat25) * vec2(1.0, 0.0);
                u_xlat26.xyz = u_xlat26.yxy * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat26.xyz;
                u_xlat10.x = float(0.0);
                for(int u_xlati_loop_3 = int(0) ; u_xlati_loop_3<_SampleCountL ; u_xlati_loop_3++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat10.x = u_xlat57 * u_xlat25 + u_xlat10.x;
                    u_xlat12.xyz = vec3(u_xlat25) * vec3(0.0, 1.0, 0.0) + u_xlat12.xyz;
                }
                u_xlatb25 = 0.100000001>=u_xlat10.x;
                u_xlat25 = (u_xlatb25) ? 0.0 : u_xlat10.x;
                u_xlat40 = u_xlat25 * (-_Extinct);
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat25 = u_xlat37 * u_xlat25;
                u_xlat25 = u_xlat25 * 1.44269502;
                u_xlat25 = exp2(u_xlat25);
                u_xlat25 = (-u_xlat25) + 1.0;
                u_xlat25 = u_xlat25 * u_xlat40;
                u_xlat54 = u_xlat54 * u_xlat25;
                u_xlat53 = u_xlat54 * u_xlat11.x + u_xlat53;
                u_xlat9.x = u_xlat39 * u_xlat4.x + u_xlat9.x;
            }
            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat8.xyz;
        }
    } else {
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = 0.0;
    }
    u_xlat1.x = u_xlat9.x * 1.25;
    u_xlat1.x = u_xlat1.x * (-_Extinct);
    u_xlat1.x = u_xlat1.x * 1.44269502;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat16.x = u_xlat1.x * u_xlat0.x + u_xlat52;
    u_xlatb31.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_NoiseBias2, _NoiseBias3, _NoiseBias2, _NoiseBias3)).xy;
    if(u_xlatb31.x){
        u_xlat4.xy = vec2(_Altitude2, _Altitude3) / (-vs_TEXCOORD1.yy);
        u_xlat31.x = (-u_xlat4.x) + u_xlat4.y;
        u_xlat47 = u_xlat31.x * 0.0500000007;
        u_xlat31.x = u_xlat45 * u_xlat31.x;
        u_xlat31.x = u_xlat31.x * 0.0500000007 + u_xlat4.x;
        u_xlat4.xz = _WorldSpaceCameraPos.xz;
        u_xlat4.y = 0.0;
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat4.xyz;
        u_xlat5.xyz = vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer)) * vec3(1.39999998, 0.0, 0.349999994);
        u_xlat6.xyz = u_xlat5.xyz * _Scroll1.xyz;
        u_xlat5.xyz = u_xlat5.xyz * _Scroll2.xyz;
        u_xlat7 = vec4(_NoiseBias2) * vec4(1.29999995, 4.9000001, 24.0, 2.5) + vec4(0.200000003, 0.100000001, 20.0, 0.300000012);
        u_xlat31.x = (-_Altitude2) + _Altitude3;
        u_xlat8.xy = u_xlat31.xx * vec2(0.100000001, 0.400000006);
        u_xlat8.xy = vec2(1.0, 1.0) / u_xlat8.xy;
        u_xlat9 = u_xlat6.xzxz * vec4(0.5, 0.5, 0.5, 0.5);
        u_xlat10.xyz = u_xlat4.xyz;
        u_xlat48 = 0.0;
        for(int u_xlati_loop_4 = 0 ; u_xlati_loop_4<4 ; u_xlati_loop_4++)
        {
            u_xlat11.xyz = u_xlat7.xxx * u_xlat10.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat12.xyz = u_xlat7.yyy * u_xlat10.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat13.xyz = u_xlat7.zzz * u_xlat10.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(1.0, 4.0, 1.0);
            u_xlat16_11 = textureLod(_NoiseTex1, u_xlat11.xyz, 0.0);
            u_xlat16_12 = textureLod(_NoiseTex2, u_xlat12.xyz, 0.0);
            u_xlat16_13 = textureLod(_NoiseTex2, u_xlat13.xyz, 0.0);
            u_xlat50 = u_xlat16_13.w * _NoiseAmp2;
            u_xlat50 = u_xlat16_12.w * _NoiseAmp1 + u_xlat50;
            u_xlat50 = (-u_xlat16_11.w) * 0.800000012 + u_xlat50;
            u_xlat50 = u_xlat7.w + u_xlat50;
            u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
            u_xlat51 = u_xlat10.y + (-_Altitude2);
            u_xlat38 = u_xlat8.x * u_xlat51;
            u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
            u_xlat55 = u_xlat38 * -2.0 + 3.0;
            u_xlat38 = u_xlat38 * u_xlat38;
            u_xlat38 = u_xlat38 * u_xlat55;
            u_xlat50 = u_xlat50 * u_xlat38;
            u_xlat51 = u_xlat31.x + (-u_xlat51);
            u_xlat51 = u_xlat8.y * u_xlat51;
            u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
            u_xlat38 = u_xlat51 * -2.0 + 3.0;
            u_xlat51 = u_xlat51 * u_xlat51;
            u_xlat51 = u_xlat51 * u_xlat38;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlat11 = u_xlat10.xzxz * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat9;
            u_xlat16_12 = textureLod(_CloudTex1, u_xlat11.xy, 0.0);
            u_xlat16_11 = textureLod(_CloudTex1, u_xlat11.zw, 0.0);
            u_xlat51 = (-u_xlat16_11.y) + u_xlat16_12.z;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlatb51 = _Edge<u_xlat50;
            if(u_xlatb51){
                u_xlat48 = u_xlat50 * u_xlat47 + u_xlat48;
            }
            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat47) + u_xlat10.xyz;
        }
    } else {
        u_xlat48 = 0.0;
    }
    u_xlat1.z = u_xlat48 * (-_Extinct);
    u_xlat1.xz = u_xlat1.xz * vec2(8.0, 1.44269502);
    u_xlat31.x = exp2(u_xlat1.z);
    u_xlat3.xyz = u_xlat31.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat47 = _Altitude4 / (-vs_TEXCOORD1.y);
    u_xlat48 = _Altitude5 / (-vs_TEXCOORD1.y);
    u_xlat48 = (-u_xlat47) + u_xlat48;
    u_xlat45 = u_xlat45 * u_xlat48;
    u_xlat45 = u_xlat45 * 0.0199999996 + u_xlat47;
    u_xlat4.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + _WorldSpaceCameraPos.xz;
    if(u_xlatb31.y){
        u_xlat45 = u_xlat48 * 0.0199999996;
        u_xlat34.xy = _Scroll1.xz * vec2(vec2(_tenkokuTimer, _tenkokuTimer));
        u_xlat34.xy = u_xlat34.xy * vec2(0.224999994, 0.0375000015);
        u_xlat46 = _NoiseBias3 * 1.35000002 + -0.100000001;
        u_xlat5.xy = u_xlat4.xy;
        u_xlat47 = 0.0;
        for(int u_xlati_loop_5 = 0 ; u_xlati_loop_5<4 ; u_xlati_loop_5++)
        {
            u_xlat35.xy = u_xlat5.xy * vec2(vec2(_cS, _cS));
            u_xlat6 = u_xlat35.xyxy * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat34.xyxy;
            u_xlat35.xy = u_xlat35.xy * vec2(9.99999975e-06, 9.99999975e-06) + u_xlat34.xy;
            u_xlat16_7 = textureLod(_CloudTex1, u_xlat6.xy, 0.0);
            u_xlat16_6 = textureLod(_CloudTex1, u_xlat6.zw, 0.0);
            u_xlat16_9 = textureLod(_CloudTex1, u_xlat35.xy, 0.0);
            u_xlat35.x = u_xlat16_6.y + u_xlat16_9.w;
            u_xlat35.x = (-u_xlat16_7.z) * 1.20000005 + u_xlat35.x;
            u_xlat35.x = u_xlat46 + u_xlat35.x;
            u_xlat35.x = clamp(u_xlat35.x, 0.0, 1.0);
            u_xlat47 = u_xlat35.x * u_xlat45 + u_xlat47;
            u_xlat5.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + u_xlat5.xy;
        }
    } else {
        u_xlat47 = 0.0;
    }
    u_xlat45 = u_xlat47 * (-_Extinct);
    u_xlat45 = u_xlat45 * 2.88539004;
    u_xlat45 = exp2(u_xlat45);
    u_xlat46 = dot((-vs_TEXCOORD1.xyz), (-vs_TEXCOORD1.xyz));
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * (-vs_TEXCOORD1.xyz);
    u_xlat47 = dot(u_xlat5.xyz, Tenkoku_Vec_SunFwd.xyz);
    u_xlat48 = dot(u_xlat5.xyz, Tenkoku_Vec_MoonFwd.xyz);
    u_xlat34.x = u_xlat47 * 2.0 + -0.75;
    u_xlat34.x = clamp(u_xlat34.x, 0.0, 1.0);
    u_xlat49 = u_xlat47 * 10.0 + -8.75;
    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
    u_xlat47 = u_xlat47 + 0.899999976;
    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
    u_xlat6.xyz = vec3(u_xlat48) + vec3(-0.400000006, -0.100000001, -0.00999999978);
    u_xlat6.xyz = u_xlat6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
    u_xlat48 = max(_TenkokuSunColor.y, _TenkokuSunColor.x);
    u_xlat48 = max(u_xlat48, _TenkokuSunColor.z);
    u_xlat48 = (-u_xlat48) + 1.0;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat7.xy = vec2(vec2(_NoiseBias, _NoiseBias)) * vec2(-0.150000036, -0.299999982) + vec2(0.600000024, 0.699999988);
    u_xlat8.xyz = u_xlat7.xxx * _TenkokuCloudColor.xyz;
    u_xlat9.xyz = (-_TenkokuCloudColor.xyz) * u_xlat7.xxx + _TenkokuCloudColor.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat8.xyz * _Tenkoku_overcastColor.xyz + (-u_xlat8.xyz);
    u_xlat8.xyz = vec3(_Tenkoku_overcastAmt) * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat53) * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat1.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat7.yyy * u_xlat8.xyz;
    u_xlat22.xyz = (-u_xlat8.xyz) * u_xlat7.yyy + u_xlat8.xyz;
    u_xlat22.xyz = vec3(u_xlat53) * u_xlat22.xyz + u_xlat9.xyz;
    u_xlat8.xyz = _TenkokuCloudAmbientColor.xyz * vec3(_Tenkoku_Ambient);
    u_xlat9.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16.x = (-u_xlat47) + u_xlat53;
    u_xlat16.x = u_xlat16.x + 1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat8.xyz = (-u_xlat8.xyz) * vec3(0.5, 0.5, 0.5) + u_xlat22.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat9.xyz;
    u_xlat22.xyz = u_xlat22.xyz + (-u_xlat8.xyz);
    u_xlat22.xyz = vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) * u_xlat22.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat22.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
    u_xlat16.x = _TenkokuCloudAmbientColor.w * -0.300000012 + 1.0;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.5, 2.5, 2.5) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat1.y = u_xlat31.x * u_xlat34.x;
    u_xlat1.xy = u_xlat1.xy * vec2(3.0, 1.5);
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.20000005, 2.20000005, 2.20000005) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat1.yyy * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat16.x = u_xlat31.x * u_xlat49;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(5.4000001, 5.4000001, 5.4000001) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat31.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat3.xyz * vec3(1.20000005, 1.20000005, 1.20000005);
    u_xlat10.xyz = vec3(u_xlat45) * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyw = u_xlat6.yyy * u_xlat10.xyz;
    u_xlat6.xyw = vec3(u_xlat48) * u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(0.100000001, 0.100000001, 0.100000001);
    u_xlat6.xyw = _TenkokuCloudAmbientColor.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) + u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat16.x = u_xlat31.x * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat45 = min(u_xlat45, 1.0);
    u_xlat10.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat6.xyw);
    u_xlat6.xyw = vec3(u_xlat45) * u_xlat10.xyz + u_xlat6.xyw;
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(1.20000005, 1.20000005, 1.20000005) + u_xlat6.xyw;
    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat9.xyz;
    u_xlat3.xyz = (-u_xlat22.xyz) * vec3(1.39999998, 1.39999998, 1.39999998) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat8.xyz;
    u_xlat31.x = (-_NoiseBias3) + 1.0;
    u_xlat47 = (-u_xlat1.x) + 1.0;
    u_xlat47 = (-u_xlat31.x) + u_xlat47;
    u_xlat31.x = _NoiseBias3 * u_xlat47 + u_xlat31.x;
    u_xlat45 = u_xlat45 + u_xlat31.x;
    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
    u_xlat45 = u_xlat45 + -0.100000001;
    u_xlat45 = u_xlat16.x * u_xlat45 + 0.100000001;
    u_xlat16.xy = u_xlat4.xy * vec2(vec2(_cS, _cS));
    u_xlat4.xy = vec2(_Tenkoku_overcastAmt, _tenkokuTimer) + vec2(_Tenkoku_overcastAmt, _tenkokuTimer);
    u_xlat19.xy = u_xlat4.yy * _Scroll1.xz;
    u_xlat16.xy = u_xlat16.xy * vec2(2.99999992e-05, 2.99999992e-05) + u_xlat19.xy;
    u_xlat16_8 = textureLod(_CloudTex1, u_xlat16.xy, 0.0);
    u_xlat16.x = max(_TenkokuCloudColor.y, _TenkokuCloudColor.x);
    u_xlat16.x = max(u_xlat16.x, _TenkokuCloudColor.z);
    u_xlat19.xyz = u_xlat16.xxx + (-_TenkokuCloudColor.xyz);
    u_xlat19.xyz = u_xlat19.xyz * vec3(0.649999976, 0.649999976, 0.649999976) + _TenkokuCloudColor.xyz;
    u_xlat6.xyw = u_xlat7.xxx * u_xlat19.xyz;
    u_xlat8.x = u_xlat16_8.x;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat19.xyz = (-u_xlat19.xyz) * u_xlat7.xxx + u_xlat19.xyz;
    u_xlat19.xyz = u_xlat8.xxx * u_xlat19.xyz + u_xlat6.xyw;
    u_xlat16.x = _Tenkoku_overcastAmt * -0.5 + 1.0;
    u_xlat6.xyw = u_xlat19.xyz * _Tenkoku_overcastColor.xyz;
    u_xlat4.x = u_xlat4.x;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat6.xyw * u_xlat16.xxx + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat4.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat16.x = 1900.0 / (-vs_TEXCOORD1.y);
    u_xlat16.x = u_xlat16.x / _FarDist;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat16.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat6.xyz = u_xlat6.zzz * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyz = vec3(u_xlat48) * u_xlat6.xyz;
    u_xlat19.xyz = u_xlat6.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat19.xyz;
    u_xlat19.xyz = (-u_xlat3.xyz) + u_xlat19.xyz;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat19.xyz + u_xlat3.xyz;
    u_xlatb16 = 0.0<Tenkoku_LightningLightIntensity;
    u_xlat31.x = dot(Tenkoku_Vec_LightningFwd.xyz, u_xlat5.xyz);
    u_xlat31.x = clamp(u_xlat31.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat31.xxx + vec3(-0.300000012, -0.649999976, -0.999899983);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = vec3(Tenkoku_LightningLightIntensity) * Tenkoku_LightningColor.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(0.25, 0.25, 0.25) + u_xlat3.xyz;
    u_xlat4.xy = u_xlat4.xy * vec2(0.25, 0.5);
    u_xlat31.x = u_xlat4.y + u_xlat4.x;
    u_xlat31.x = u_xlat4.z * 3000.0 + u_xlat31.x;
    u_xlat4.xyz = u_xlat31.xxx * Tenkoku_LightningColor.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(Tenkoku_LightningLightIntensity) + u_xlat5.xyz;
    u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat16.x = (-vs_TEXCOORD1.y) * u_xlat46 + -0.0250000004;
    u_xlat16.x = u_xlat16.x * 3.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat3.xyz = (-u_xlat10_2.xyz) * vec3(0.800000012, 0.800000012, 0.800000012) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16.x = _humid * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat16.xxx * u_xlat2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(1.25, 1.25, 1.25);
    SV_Target0.w = (-u_xlat1.x) * u_xlat45 + 1.0;
    return;
}
-------- failed compiling:
fragment evaluation shader
GLSL compilation failed for shader TENKOKU/cloud_sphere:
0(149) : error C1503: undefined variable "u_xlat10_2"
0(159) : error C1503: undefined variable "u_xlat10_2"
0(531) : error C1503: undefined variable "u_xlat10_2"
0(555) : error C1503: undefined variable "u_xlat10_2"
0(592) : error C1503: undefined variable "u_xlat10_2"
0(615) : error C1503: undefined variable "u_xlat10_2"
0(619) : error C1503: undefined variable "u_xlat10_2"
Note: Creation of internal variant of shader 'TENKOKU/cloud_sphere' failed.
Refreshing native plugins compatible for Editor in 3.32 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 4633 Unused Serialized files (Serialized files now loaded: 0)
Unloading 55 unused Assets / (13.9 MB). Loaded Objects now: 5501.
Memory consumption went from 380.7 MB to 366.8 MB.
Total: 7.975788 ms (FindLiveObjects: 0.413567 ms CreateObjectMapping: 0.378756 ms MarkObjects: 3.691539 ms  DeleteObjects: 3.490462 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
========================================================================
Received Import Request.
  Time since last request: 376.289844 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Prefabs Nature
  artifactKey: Guid(328db0525fc311c4da22b5df922bf639) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Prefabs Nature using Guid(328db0525fc311c4da22b5df922bf639) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'ebb1ba9aac7625b1b3edfd8c33e22d10') in 0.007093 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.319607 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Prefabs Rocks Mobile
  artifactKey: Guid(a0ef05b23b503f54ca592f8f33f1003f) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Prefabs Rocks Mobile using Guid(a0ef05b23b503f54ca592f8f33f1003f) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '46cee69d169bd9993911845a3444242c') in 0.000573 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.563596 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Skybox
  artifactKey: Guid(e192687b7c823bd42a8b07af0e16e558) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Skybox using Guid(e192687b7c823bd42a8b07af0e16e558) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '62115c83f877700fbc284d7a9e3998e2') in 0.000544 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.139157 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Sources
  artifactKey: Guid(7fa78e60155fcb84cb7a3402b673c0de) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Sources using Guid(7fa78e60155fcb84cb7a3402b673c0de) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '674df430e16115476c77c9dc08f51568') in 0.000565 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.495011 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support
  artifactKey: Guid(3ae0b77b7fc0a9b4b91b7ebe79de6c08) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support using Guid(3ae0b77b7fc0a9b4b91b7ebe79de6c08) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'a271f9c0620cb4688ffd0e12d59d05a2') in 0.000676 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.642830 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Backup Shaders
  artifactKey: Guid(02b543b26f6293043a99f2dcbac7dc42) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Backup Shaders using Guid(02b543b26f6293043a99f2dcbac7dc42) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'ee25cd33c14260670d5afbd3582dbf02') in 0.000571 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.345401 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Nature Renderer
  artifactKey: Guid(31b00e25f9d250e49b19d26f03a084ad) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Nature Renderer using Guid(31b00e25f9d250e49b19d26f03a084ad) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '61762a973c98419c503f548073148cec') in 0.000560 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.382595 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio
  artifactKey: Guid(880f7bd5d550b8a4a9379656fad4f257) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio using Guid(880f7bd5d550b8a4a9379656fad4f257) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'cf4da95b9661d78f4c74210a7be5ff87') in 0.000662 seconds 
========================================================================
Received Import Request.
  Time since last request: 1.189308 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/Legacy Prefabs
  artifactKey: Guid(0e8787e8703b6d344a4a325c910e7faa) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/Legacy Prefabs using Guid(0e8787e8703b6d344a4a325c910e7faa) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '71a788cfceb7f85ec1d0a95677053425') in 0.000558 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.222502 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/VS HDRP 7.2.1.unitypackage
  artifactKey: Guid(dbe99ad10d99bde4cb2ad9ea10599932) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/VS HDRP 7.2.1.unitypackage using Guid(dbe99ad10d99bde4cb2ad9ea10599932) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '83539a67df9f66b483c93d08be9607b2') in 0.008709 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.031498 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/VS URP 7.2.1.unitypackage
  artifactKey: Guid(2998ebeb41275d34bb2dfa5b6d9c48e9) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/VS URP 7.2.1.unitypackage using Guid(2998ebeb41275d34bb2dfa5b6d9c48e9) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '809e5ceeab43ecd4494a765323230667') in 0.000938 seconds 
========================================================================
Received Import Request.
  Time since last request: 0.472453 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/VS Standard RP 2019.unitypackage
  artifactKey: Guid(d95ca10f923fb60488daccc0ea27edf5) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/VS Standard RP 2019.unitypackage using Guid(d95ca10f923fb60488daccc0ea27edf5) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '9468ee28c8b716d180d08daab19b4a08') in 0.001008 seconds 
========================================================================
Received Import Request.
  Time since last request: 1.314975 seconds.
  path: Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/VS Standard RP 2018.unitypackage
  artifactKey: Guid(8e7ea98c8fdec0d4ea85f1c95ae70db5) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Assets/ANGRY MESH/Nature Pack - PBR Rocks/Third-Party Support/Vegetation Studio/VS Standard RP 2018.unitypackage using Guid(8e7ea98c8fdec0d4ea85f1c95ae70db5) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'da5e1a216ac7a362df9465787cd88ff6') in 0.001022 seconds 
========================================================================
Received Prepare
Registering precompiled user dll's ...
Registered in 0.001926 seconds.
Begin MonoManager ReloadAssembly
Symbol file LoadedFromMemory is not a mono symbol file
Native extension for LinuxStandalone target not found
Native extension for Android target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 1.09 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  1.099 seconds
Domain Reload Profiling:
	ReloadAssembly (1100ms)
		BeginReloadAssembly (91ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (4ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (32ms)
		EndReloadAssembly (925ms)
			LoadAssemblies (54ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (198ms)
			ReleaseScriptCaches (1ms)
			RebuildScriptCaches (53ms)
			SetupLoadedEditorAssemblies (565ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (16ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (1ms)
				BeforeProcessingInitializeOnLoad (52ms)
				ProcessInitializeOnLoadAttributes (405ms)
				ProcessInitializeOnLoadMethodAttributes (86ms)
				AfterProcessingInitializeOnLoad (4ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (5ms)
Platform modules already initialized, skipping
State comes from an incompatible keyword space
State comes from an incompatible keyword space
Shader 'Hidden/BOXOPHOBIC/The Vegetation Engine/Helpers/Debug': dependency 'LightMode' shader 'ForwardBase' not found
-------- Shader TENKOKU/cloud_sphere compilation failed
#version 450
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _SampleCount0;
uniform 	float _SampleCount1;
uniform 	int _SampleCountL;
uniform 	float _NoiseFreq1;
uniform 	float _NoiseFreq2;
uniform 	float _NoiseAmp1;
uniform 	float _NoiseAmp2;
uniform 	float _NoiseBias;
uniform 	float _NoiseBias2;
uniform 	float _NoiseBias3;
uniform 	vec3 _Scroll1;
uniform 	vec3 _Scroll2;
uniform 	float _Altitude0;
uniform 	float _Altitude1;
uniform 	float _Altitude2;
uniform 	float _Altitude3;
uniform 	float _Altitude4;
uniform 	float _Altitude5;
uniform 	float _FarDist;
uniform 	float _Scatter;
uniform 	float _HGCoeff;
uniform 	float _Extinct;
uniform 	float _Edge;
uniform 	float _Darkness;
uniform 	float _humid;
uniform 	vec4 Tenkoku_Vec_SunFwd;
uniform 	vec4 Tenkoku_Vec_MoonFwd;
uniform 	vec4 Tenkoku_Vec_LightningFwd;
uniform 	float Tenkoku_LightningLightIntensity;
uniform 	vec4 Tenkoku_LightningColor;
uniform 	vec4 _TenkokuSunColor;
uniform 	vec4 Tenkoku_MoonLightColor;
uniform 	vec4 _TenkokuCloudColor;
uniform 	vec4 _TenkokuCloudAmbientColor;
uniform 	float _Tenkoku_Ambient;
uniform 	float _Tenkoku_AmbientGI;
uniform 	vec4 _Tenkoku_overcastColor;
uniform 	float _Tenkoku_overcastAmt;
uniform 	float _cS;
uniform 	float _tenkokuTimer;
uniform 	float _tenkokuNoiseTimer;
uniform 	float _Tenkoku_UseElek;
UNITY_LOCATION(0) uniform  sampler2D _Tenkoku_SkyTex;
UNITY_LOCATION(1) uniform  sampler2D _Tenkoku_SkyBox;
UNITY_LOCATION(2) uniform  sampler3D _NoiseTex1;
UNITY_LOCATION(3) uniform  sampler3D _NoiseTex2;
UNITY_LOCATION(4) uniform  sampler2D _CloudTex1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat16_6;
vec4 u_xlat7;
vec4 u_xlat16_7;
vec3 u_xlat8;
vec4 u_xlat16_8;
vec4 u_xlat9;
vec4 u_xlat16_9;
vec3 u_xlat10;
vec4 u_xlat16_10;
vec4 u_xlat11;
vec4 u_xlat16_11;
vec3 u_xlat12;
vec4 u_xlat16_12;
vec3 u_xlat13;
vec4 u_xlat16_13;
vec3 u_xlat14;
vec4 u_xlat16_14;
vec2 u_xlat16;
bool u_xlatb16;
vec3 u_xlat19;
vec3 u_xlat22;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
vec3 u_xlat26;
float u_xlat28;
vec2 u_xlat31;
int u_xlati31;
bvec2 u_xlatb31;
vec2 u_xlat34;
vec2 u_xlat35;
bool u_xlatb35;
float u_xlat37;
float u_xlat38;
float u_xlat39;
bool u_xlatb39;
float u_xlat40;
int u_xlati40;
bool u_xlatb40;
float u_xlat43;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
int u_xlati46;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
int u_xlati49;
float u_xlat50;
bool u_xlatb50;
float u_xlat51;
bool u_xlatb51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
bool u_xlatb54;
float u_xlat55;
int u_xlati56;
float u_xlat57;
bool u_xlatb57;
void main()
{
    u_xlat0.xyz = max(vs_TEXCOORD2.xyw, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlatb1.xy = equal(vec4(_Tenkoku_UseElek), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    if(u_xlatb1.x){
        u_xlat1.xz = u_xlat0.xy / u_xlat0.zz;
        u_xlat10_2 = texture(_Tenkoku_SkyTex, u_xlat1.xz);
    } else {
        u_xlat16_2.x = float(1.0);
        u_xlat16_2.y = float(1.0);
        u_xlat16_2.z = float(1.0);
    }
    if(u_xlatb1.y){
        u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
        u_xlat16_2 = texture(_Tenkoku_SkyBox, u_xlat0.xy);
    }
    u_xlat0.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlatb45 = (-vs_TEXCOORD1.y)<0.00999999978;
    u_xlatb1.x = 0.0>=_FarDist;
    u_xlatb45 = u_xlatb45 || u_xlatb1.x;
    if(u_xlatb45){
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 0.0;
        return;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(vec2(_tenkokuTimer, _tenkokuTimer));
    u_xlat3.xyz = vec3(vec3(_Darkness, _Darkness, _Darkness)) * (-u_xlat0.xyz) + u_xlat0.xyz;
    u_xlat45 = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat1.xy);
    u_xlat45 = sin(u_xlat45);
    u_xlat45 = u_xlat45 * 43758.5469;
    u_xlat45 = fract(u_xlat45);
    u_xlatb31.x = 0.0<_NoiseBias;
    if(u_xlatb31.x){
        u_xlat31.xy = trunc(vec2(_SampleCount1, _SampleCount0));
        u_xlat46 = (-u_xlat31.x) + u_xlat31.y;
        u_xlat31.x = (-vs_TEXCOORD1.y) * u_xlat46 + u_xlat31.x;
        u_xlati46 = int(u_xlat31.x);
        u_xlat47 = _Altitude0 / (-vs_TEXCOORD1.y);
        u_xlat48 = _Altitude1 / (-vs_TEXCOORD1.y);
        u_xlat48 = (-u_xlat47) + u_xlat48;
        u_xlat31.x = trunc(u_xlat31.x);
        u_xlat4.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = u_xlat45 * u_xlat48;
        u_xlat31.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = dot((-vs_TEXCOORD1.xyz), Tenkoku_Vec_SunFwd.xyz);
        u_xlat19.x = (-_HGCoeff) * _HGCoeff + 1.0;
        u_xlat19.x = u_xlat19.x * 0.5;
        u_xlat34.x = _HGCoeff * _HGCoeff + 1.0;
        u_xlat48 = (-_HGCoeff) * u_xlat48 + u_xlat34.x;
        u_xlat48 = u_xlat48 * u_xlat48;
        u_xlat48 = u_xlat19.x / u_xlat48;
        u_xlat19.x = u_xlat48 * 6.0 + -3.0;
        u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
        u_xlat48 = u_xlat48 + u_xlat19.x;
        u_xlat31.x = u_xlat31.x + u_xlat47;
        u_xlat5.xz = _WorldSpaceCameraPos.xz;
        u_xlat5.y = 0.0;
        u_xlat19.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat5.xyz;
        u_xlatb31.x = 0.275000006<_Tenkoku_overcastAmt;
        u_xlati31 = (u_xlatb31.x) ? 4 : u_xlati46;
        u_xlat5.xyz = _Scroll1.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat6.xyz = _Scroll2.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat46 = _NoiseBias * 2.55000019 + -0.400000006;
        u_xlat47 = (-_Altitude0) + _Altitude1;
        u_xlat7.xy = vec2(u_xlat47) * vec2(0.100000001, 0.400000006);
        u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
        u_xlat50 = float(_SampleCountL);
        u_xlat51 = u_xlat50 * Tenkoku_Vec_SunFwd.y;
        u_xlat37 = _Extinct * -0.75;
        u_xlat8.xyz = u_xlat19.xyz;
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = float(0.0);
        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati31 ; u_xlati_loop_1++)
        {
            u_xlat10.xyz = u_xlat8.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
            u_xlat10.xyz = u_xlat10.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat8.xyz * vec3(_NoiseFreq2);
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat10.xyz = u_xlat10.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat16_10 = textureLod(_NoiseTex1, u_xlat10.xyz, 0.0);
            u_xlat16_11 = textureLod(_NoiseTex2, u_xlat11.xyz, 0.0);
            u_xlat39 = u_xlat16_11.w * _NoiseAmp2;
            u_xlat39 = u_xlat16_10.w * _NoiseAmp1 + u_xlat39;
            u_xlat39 = u_xlat46 + u_xlat39;
            u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
            u_xlat54 = u_xlat8.y + (-_Altitude0);
            u_xlat10.x = u_xlat7.x * u_xlat54;
            u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
            u_xlat25 = u_xlat10.x * -2.0 + 3.0;
            u_xlat10.x = u_xlat10.x * u_xlat10.x;
            u_xlat10.x = u_xlat10.x * u_xlat25;
            u_xlat39 = u_xlat39 * u_xlat10.x;
            u_xlat54 = u_xlat47 + (-u_xlat54);
            u_xlat54 = u_xlat7.y * u_xlat54;
            u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
            u_xlat10.x = u_xlat54 * -2.0 + 3.0;
            u_xlat54 = u_xlat54 * u_xlat54;
            u_xlat54 = u_xlat54 * u_xlat10.x;
            u_xlat39 = u_xlat54 * u_xlat39;
            u_xlatb54 = _Edge<u_xlat39;
            if(u_xlatb54){
                u_xlat54 = u_xlat4.x * u_xlat39;
                u_xlat10.x = float(u_xlati_loop_1);
                u_xlat10.xy = u_xlat1.xy + u_xlat10.xx;
                u_xlat10.x = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat10.xy);
                u_xlat10.x = sin(u_xlat10.x);
                u_xlat10.x = u_xlat10.x * 43758.5469;
                u_xlat10.x = fract(u_xlat10.x);
                u_xlat54 = u_xlat54 * _Scatter;
                u_xlat54 = u_xlat48 * u_xlat54;
                u_xlat25 = (-u_xlat8.y) + _Altitude1;
                u_xlat40 = u_xlat25 / u_xlat51;
                u_xlat11.xyz = vec3(u_xlat40) * Tenkoku_Vec_SunFwd.xyz;
                u_xlat11.xyz = u_xlat11.xyz * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat11.xyz;
                u_xlat55 = 0.0;
                for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<_SampleCountL ; u_xlati_loop_2++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat55 = u_xlat57 * u_xlat40 + u_xlat55;
                    u_xlat12.xyz = Tenkoku_Vec_SunFwd.xyz * vec3(u_xlat40) + u_xlat12.xyz;
                }
                u_xlatb40 = 0.100000001>=u_xlat55;
                u_xlat40 = (u_xlatb40) ? 0.0 : u_xlat55;
                u_xlat11.x = u_xlat40 * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat40 = u_xlat37 * u_xlat40;
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat40 = (-u_xlat40) + 1.0;
                u_xlat40 = u_xlat40 * u_xlat11.x;
                u_xlat40 = u_xlat54 * u_xlat40;
                u_xlat40 = u_xlat40 * _TenkokuCloudColor.x;
                u_xlat11.x = u_xlat9.x * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat26.x = u_xlat37 * u_xlat9.x;
                u_xlat26.x = u_xlat26.x * 1.44269502;
                u_xlat26.x = exp2(u_xlat26.x);
                u_xlat26.x = (-u_xlat26.x) + 1.0;
                u_xlat11.x = u_xlat26.x * u_xlat11.x;
                u_xlat52 = u_xlat40 * u_xlat11.x + u_xlat52;
                u_xlat25 = u_xlat25 / u_xlat50;
                u_xlat26.xy = vec2(u_xlat25) * vec2(1.0, 0.0);
                u_xlat26.xyz = u_xlat26.yxy * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat26.xyz;
                u_xlat10.x = float(0.0);
                for(int u_xlati_loop_3 = int(0) ; u_xlati_loop_3<_SampleCountL ; u_xlati_loop_3++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat10.x = u_xlat57 * u_xlat25 + u_xlat10.x;
                    u_xlat12.xyz = vec3(u_xlat25) * vec3(0.0, 1.0, 0.0) + u_xlat12.xyz;
                }
                u_xlatb25 = 0.100000001>=u_xlat10.x;
                u_xlat25 = (u_xlatb25) ? 0.0 : u_xlat10.x;
                u_xlat40 = u_xlat25 * (-_Extinct);
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat25 = u_xlat37 * u_xlat25;
                u_xlat25 = u_xlat25 * 1.44269502;
                u_xlat25 = exp2(u_xlat25);
                u_xlat25 = (-u_xlat25) + 1.0;
                u_xlat25 = u_xlat25 * u_xlat40;
                u_xlat54 = u_xlat54 * u_xlat25;
                u_xlat53 = u_xlat54 * u_xlat11.x + u_xlat53;
                u_xlat9.x = u_xlat39 * u_xlat4.x + u_xlat9.x;
            }
            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat8.xyz;
        }
    } else {
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = 0.0;
    }
    u_xlat1.x = u_xlat9.x * 1.25;
    u_xlat1.x = u_xlat1.x * (-_Extinct);
    u_xlat1.x = u_xlat1.x * 1.44269502;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat16.x = u_xlat1.x * u_xlat0.x + u_xlat52;
    u_xlatb31.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_NoiseBias2, _NoiseBias3, _NoiseBias2, _NoiseBias3)).xy;
    if(u_xlatb31.x){
        u_xlat4.xy = vec2(_Altitude2, _Altitude3) / (-vs_TEXCOORD1.yy);
        u_xlat31.x = (-u_xlat4.x) + u_xlat4.y;
        u_xlat47 = u_xlat31.x * 0.0500000007;
        u_xlat31.x = u_xlat45 * u_xlat31.x;
        u_xlat31.x = u_xlat31.x * 0.0500000007 + u_xlat4.x;
        u_xlat4.xz = _WorldSpaceCameraPos.xz;
        u_xlat4.y = 0.0;
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat4.xyz;
        u_xlat5.xyz = vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer)) * vec3(1.39999998, 0.0, 0.349999994);
        u_xlat6.xyz = u_xlat5.xyz * _Scroll1.xyz;
        u_xlat5.xyz = u_xlat5.xyz * _Scroll2.xyz;
        u_xlat7 = vec4(_NoiseBias2) * vec4(1.29999995, 4.9000001, 24.0, 2.5) + vec4(0.200000003, 0.100000001, 20.0, 0.300000012);
        u_xlat31.x = (-_Altitude2) + _Altitude3;
        u_xlat8.xy = u_xlat31.xx * vec2(0.100000001, 0.400000006);
        u_xlat8.xy = vec2(1.0, 1.0) / u_xlat8.xy;
        u_xlat9 = u_xlat6.xzxz * vec4(0.5, 0.5, 0.5, 0.5);
        u_xlat10.xyz = u_xlat4.xyz;
        u_xlat48 = 0.0;
        for(int u_xlati_loop_4 = 0 ; u_xlati_loop_4<4 ; u_xlati_loop_4++)
        {
            u_xlat11.xyz = u_xlat7.xxx * u_xlat10.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat12.xyz = u_xlat7.yyy * u_xlat10.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat13.xyz = u_xlat7.zzz * u_xlat10.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(1.0, 4.0, 1.0);
            u_xlat16_11 = textureLod(_NoiseTex1, u_xlat11.xyz, 0.0);
            u_xlat16_12 = textureLod(_NoiseTex2, u_xlat12.xyz, 0.0);
            u_xlat16_13 = textureLod(_NoiseTex2, u_xlat13.xyz, 0.0);
            u_xlat50 = u_xlat16_13.w * _NoiseAmp2;
            u_xlat50 = u_xlat16_12.w * _NoiseAmp1 + u_xlat50;
            u_xlat50 = (-u_xlat16_11.w) * 0.800000012 + u_xlat50;
            u_xlat50 = u_xlat7.w + u_xlat50;
            u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
            u_xlat51 = u_xlat10.y + (-_Altitude2);
            u_xlat38 = u_xlat8.x * u_xlat51;
            u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
            u_xlat55 = u_xlat38 * -2.0 + 3.0;
            u_xlat38 = u_xlat38 * u_xlat38;
            u_xlat38 = u_xlat38 * u_xlat55;
            u_xlat50 = u_xlat50 * u_xlat38;
            u_xlat51 = u_xlat31.x + (-u_xlat51);
            u_xlat51 = u_xlat8.y * u_xlat51;
            u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
            u_xlat38 = u_xlat51 * -2.0 + 3.0;
            u_xlat51 = u_xlat51 * u_xlat51;
            u_xlat51 = u_xlat51 * u_xlat38;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlat11 = u_xlat10.xzxz * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat9;
            u_xlat16_12 = textureLod(_CloudTex1, u_xlat11.xy, 0.0);
            u_xlat16_11 = textureLod(_CloudTex1, u_xlat11.zw, 0.0);
            u_xlat51 = (-u_xlat16_11.y) + u_xlat16_12.z;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlatb51 = _Edge<u_xlat50;
            if(u_xlatb51){
                u_xlat48 = u_xlat50 * u_xlat47 + u_xlat48;
            }
            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat47) + u_xlat10.xyz;
        }
    } else {
        u_xlat48 = 0.0;
    }
    u_xlat1.z = u_xlat48 * (-_Extinct);
    u_xlat1.xz = u_xlat1.xz * vec2(8.0, 1.44269502);
    u_xlat31.x = exp2(u_xlat1.z);
    u_xlat3.xyz = u_xlat31.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat47 = _Altitude4 / (-vs_TEXCOORD1.y);
    u_xlat48 = _Altitude5 / (-vs_TEXCOORD1.y);
    u_xlat48 = (-u_xlat47) + u_xlat48;
    u_xlat45 = u_xlat45 * u_xlat48;
    u_xlat45 = u_xlat45 * 0.0199999996 + u_xlat47;
    u_xlat4.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + _WorldSpaceCameraPos.xz;
    if(u_xlatb31.y){
        u_xlat45 = u_xlat48 * 0.0199999996;
        u_xlat34.xy = _Scroll1.xz * vec2(vec2(_tenkokuTimer, _tenkokuTimer));
        u_xlat34.xy = u_xlat34.xy * vec2(0.224999994, 0.0375000015);
        u_xlat46 = _NoiseBias3 * 1.35000002 + -0.100000001;
        u_xlat5.xy = u_xlat4.xy;
        u_xlat47 = 0.0;
        for(int u_xlati_loop_5 = 0 ; u_xlati_loop_5<4 ; u_xlati_loop_5++)
        {
            u_xlat35.xy = u_xlat5.xy * vec2(vec2(_cS, _cS));
            u_xlat6 = u_xlat35.xyxy * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat34.xyxy;
            u_xlat35.xy = u_xlat35.xy * vec2(9.99999975e-06, 9.99999975e-06) + u_xlat34.xy;
            u_xlat16_7 = textureLod(_CloudTex1, u_xlat6.xy, 0.0);
            u_xlat16_6 = textureLod(_CloudTex1, u_xlat6.zw, 0.0);
            u_xlat16_9 = textureLod(_CloudTex1, u_xlat35.xy, 0.0);
            u_xlat35.x = u_xlat16_6.y + u_xlat16_9.w;
            u_xlat35.x = (-u_xlat16_7.z) * 1.20000005 + u_xlat35.x;
            u_xlat35.x = u_xlat46 + u_xlat35.x;
            u_xlat35.x = clamp(u_xlat35.x, 0.0, 1.0);
            u_xlat47 = u_xlat35.x * u_xlat45 + u_xlat47;
            u_xlat5.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + u_xlat5.xy;
        }
    } else {
        u_xlat47 = 0.0;
    }
    u_xlat45 = u_xlat47 * (-_Extinct);
    u_xlat45 = u_xlat45 * 2.88539004;
    u_xlat45 = exp2(u_xlat45);
    u_xlat46 = dot((-vs_TEXCOORD1.xyz), (-vs_TEXCOORD1.xyz));
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * (-vs_TEXCOORD1.xyz);
    u_xlat47 = dot(u_xlat5.xyz, Tenkoku_Vec_SunFwd.xyz);
    u_xlat48 = dot(u_xlat5.xyz, Tenkoku_Vec_MoonFwd.xyz);
    u_xlat34.x = u_xlat47 * 2.0 + -0.75;
    u_xlat34.x = clamp(u_xlat34.x, 0.0, 1.0);
    u_xlat49 = u_xlat47 * 10.0 + -8.75;
    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
    u_xlat47 = u_xlat47 + 0.899999976;
    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
    u_xlat6.xyz = vec3(u_xlat48) + vec3(-0.400000006, -0.100000001, -0.00999999978);
    u_xlat6.xyz = u_xlat6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
    u_xlat48 = max(_TenkokuSunColor.y, _TenkokuSunColor.x);
    u_xlat48 = max(u_xlat48, _TenkokuSunColor.z);
    u_xlat48 = (-u_xlat48) + 1.0;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat7.xy = vec2(vec2(_NoiseBias, _NoiseBias)) * vec2(-0.150000036, -0.299999982) + vec2(0.600000024, 0.699999988);
    u_xlat8.xyz = u_xlat7.xxx * _TenkokuCloudColor.xyz;
    u_xlat9.xyz = (-_TenkokuCloudColor.xyz) * u_xlat7.xxx + _TenkokuCloudColor.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat8.xyz * _Tenkoku_overcastColor.xyz + (-u_xlat8.xyz);
    u_xlat8.xyz = vec3(_Tenkoku_overcastAmt) * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat53) * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat1.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat7.yyy * u_xlat8.xyz;
    u_xlat22.xyz = (-u_xlat8.xyz) * u_xlat7.yyy + u_xlat8.xyz;
    u_xlat22.xyz = vec3(u_xlat53) * u_xlat22.xyz + u_xlat9.xyz;
    u_xlat8.xyz = _TenkokuCloudAmbientColor.xyz * vec3(_Tenkoku_Ambient);
    u_xlat9.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16.x = (-u_xlat47) + u_xlat53;
    u_xlat16.x = u_xlat16.x + 1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat8.xyz = (-u_xlat8.xyz) * vec3(0.5, 0.5, 0.5) + u_xlat22.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat9.xyz;
    u_xlat22.xyz = u_xlat22.xyz + (-u_xlat8.xyz);
    u_xlat22.xyz = vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) * u_xlat22.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat22.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
    u_xlat16.x = _TenkokuCloudAmbientColor.w * -0.300000012 + 1.0;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.5, 2.5, 2.5) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat1.y = u_xlat31.x * u_xlat34.x;
    u_xlat1.xy = u_xlat1.xy * vec2(3.0, 1.5);
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.20000005, 2.20000005, 2.20000005) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat1.yyy * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat16.x = u_xlat31.x * u_xlat49;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(5.4000001, 5.4000001, 5.4000001) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat31.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat3.xyz * vec3(1.20000005, 1.20000005, 1.20000005);
    u_xlat10.xyz = vec3(u_xlat45) * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyw = u_xlat6.yyy * u_xlat10.xyz;
    u_xlat6.xyw = vec3(u_xlat48) * u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(0.100000001, 0.100000001, 0.100000001);
    u_xlat6.xyw = _TenkokuCloudAmbientColor.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) + u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat16.x = u_xlat31.x * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat45 = min(u_xlat45, 1.0);
    u_xlat10.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat6.xyw);
    u_xlat6.xyw = vec3(u_xlat45) * u_xlat10.xyz + u_xlat6.xyw;
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(1.20000005, 1.20000005, 1.20000005) + u_xlat6.xyw;
    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat9.xyz;
    u_xlat3.xyz = (-u_xlat22.xyz) * vec3(1.39999998, 1.39999998, 1.39999998) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat8.xyz;
    u_xlat31.x = (-_NoiseBias3) + 1.0;
    u_xlat47 = (-u_xlat1.x) + 1.0;
    u_xlat47 = (-u_xlat31.x) + u_xlat47;
    u_xlat31.x = _NoiseBias3 * u_xlat47 + u_xlat31.x;
    u_xlat45 = u_xlat45 + u_xlat31.x;
    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
    u_xlat45 = u_xlat45 + -0.100000001;
    u_xlat45 = u_xlat16.x * u_xlat45 + 0.100000001;
    u_xlat16.xy = u_xlat4.xy * vec2(vec2(_cS, _cS));
    u_xlat4.xy = vec2(_Tenkoku_overcastAmt, _tenkokuTimer) + vec2(_Tenkoku_overcastAmt, _tenkokuTimer);
    u_xlat19.xy = u_xlat4.yy * _Scroll1.xz;
    u_xlat16.xy = u_xlat16.xy * vec2(2.99999992e-05, 2.99999992e-05) + u_xlat19.xy;
    u_xlat16_8 = textureLod(_CloudTex1, u_xlat16.xy, 0.0);
    u_xlat16.x = max(_TenkokuCloudColor.y, _TenkokuCloudColor.x);
    u_xlat16.x = max(u_xlat16.x, _TenkokuCloudColor.z);
    u_xlat19.xyz = u_xlat16.xxx + (-_TenkokuCloudColor.xyz);
    u_xlat19.xyz = u_xlat19.xyz * vec3(0.649999976, 0.649999976, 0.649999976) + _TenkokuCloudColor.xyz;
    u_xlat6.xyw = u_xlat7.xxx * u_xlat19.xyz;
    u_xlat8.x = u_xlat16_8.x;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat19.xyz = (-u_xlat19.xyz) * u_xlat7.xxx + u_xlat19.xyz;
    u_xlat19.xyz = u_xlat8.xxx * u_xlat19.xyz + u_xlat6.xyw;
    u_xlat16.x = _Tenkoku_overcastAmt * -0.5 + 1.0;
    u_xlat6.xyw = u_xlat19.xyz * _Tenkoku_overcastColor.xyz;
    u_xlat4.x = u_xlat4.x;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat6.xyw * u_xlat16.xxx + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat4.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat16.x = 1900.0 / (-vs_TEXCOORD1.y);
    u_xlat16.x = u_xlat16.x / _FarDist;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat16.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat6.xyz = u_xlat6.zzz * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyz = vec3(u_xlat48) * u_xlat6.xyz;
    u_xlat19.xyz = u_xlat6.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat19.xyz;
    u_xlat19.xyz = (-u_xlat3.xyz) + u_xlat19.xyz;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat19.xyz + u_xlat3.xyz;
    u_xlatb16 = 0.0<Tenkoku_LightningLightIntensity;
    u_xlat31.x = dot(Tenkoku_Vec_LightningFwd.xyz, u_xlat5.xyz);
    u_xlat31.x = clamp(u_xlat31.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat31.xxx + vec3(-0.300000012, -0.649999976, -0.999899983);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = vec3(Tenkoku_LightningLightIntensity) * Tenkoku_LightningColor.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(0.25, 0.25, 0.25) + u_xlat3.xyz;
    u_xlat4.xy = u_xlat4.xy * vec2(0.25, 0.5);
    u_xlat31.x = u_xlat4.y + u_xlat4.x;
    u_xlat31.x = u_xlat4.z * 3000.0 + u_xlat31.x;
    u_xlat4.xyz = u_xlat31.xxx * Tenkoku_LightningColor.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(Tenkoku_LightningLightIntensity) + u_xlat5.xyz;
    u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat16.x = (-vs_TEXCOORD1.y) * u_xlat46 + -0.0250000004;
    u_xlat16.x = u_xlat16.x * 3.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat3.xyz = (-u_xlat10_2.xyz) * vec3(0.800000012, 0.800000012, 0.800000012) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16.x = _humid * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat16.xxx * u_xlat2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(1.25, 1.25, 1.25);
    SV_Target0.w = (-u_xlat1.x) * u_xlat45 + 1.0;
    return;
}
-------- failed compiling:
fragment evaluation shader
GLSL compilation failed for shader TENKOKU/cloud_sphere:
0(149) : error C1503: undefined variable "u_xlat10_2"
0(159) : error C1503: undefined variable "u_xlat10_2"
0(531) : error C1503: undefined variable "u_xlat10_2"
0(555) : error C1503: undefined variable "u_xlat10_2"
0(592) : error C1503: undefined variable "u_xlat10_2"
0(615) : error C1503: undefined variable "u_xlat10_2"
0(619) : error C1503: undefined variable "u_xlat10_2"
Note: Creation of internal variant of shader 'TENKOKU/cloud_sphere' failed.
Refreshing native plugins compatible for Editor in 1.90 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 4633 Unused Serialized files (Serialized files now loaded: 0)
Unloading 55 unused Assets / (13.2 MB). Loaded Objects now: 5517.
Memory consumption went from 380.1 MB to 366.9 MB.
Total: 6.805634 ms (FindLiveObjects: 0.451011 ms CreateObjectMapping: 0.368219 ms MarkObjects: 3.387060 ms  DeleteObjects: 2.598377 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
========================================================================
Received Prepare
Switching render pipeline 19ba41d7c0026c3459d37c2fe90c55a0 -> a31e9f9f9c9d4b9429ed0d1234e22103
State comes from an incompatible keyword space
State comes from an incompatible keyword space
Shader 'Hidden/BOXOPHOBIC/The Vegetation Engine/Helpers/Debug': dependency 'LightMode' shader 'ForwardBase' not found
-------- Shader TENKOKU/cloud_sphere compilation failed
#version 450
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _SampleCount0;
uniform 	float _SampleCount1;
uniform 	int _SampleCountL;
uniform 	float _NoiseFreq1;
uniform 	float _NoiseFreq2;
uniform 	float _NoiseAmp1;
uniform 	float _NoiseAmp2;
uniform 	float _NoiseBias;
uniform 	float _NoiseBias2;
uniform 	float _NoiseBias3;
uniform 	vec3 _Scroll1;
uniform 	vec3 _Scroll2;
uniform 	float _Altitude0;
uniform 	float _Altitude1;
uniform 	float _Altitude2;
uniform 	float _Altitude3;
uniform 	float _Altitude4;
uniform 	float _Altitude5;
uniform 	float _FarDist;
uniform 	float _Scatter;
uniform 	float _HGCoeff;
uniform 	float _Extinct;
uniform 	float _Edge;
uniform 	float _Darkness;
uniform 	float _humid;
uniform 	vec4 Tenkoku_Vec_SunFwd;
uniform 	vec4 Tenkoku_Vec_MoonFwd;
uniform 	vec4 Tenkoku_Vec_LightningFwd;
uniform 	float Tenkoku_LightningLightIntensity;
uniform 	vec4 Tenkoku_LightningColor;
uniform 	vec4 _TenkokuSunColor;
uniform 	vec4 Tenkoku_MoonLightColor;
uniform 	vec4 _TenkokuCloudColor;
uniform 	vec4 _TenkokuCloudAmbientColor;
uniform 	float _Tenkoku_Ambient;
uniform 	float _Tenkoku_AmbientGI;
uniform 	vec4 _Tenkoku_overcastColor;
uniform 	float _Tenkoku_overcastAmt;
uniform 	float _cS;
uniform 	float _tenkokuTimer;
uniform 	float _tenkokuNoiseTimer;
uniform 	float _Tenkoku_UseElek;
UNITY_LOCATION(0) uniform  sampler2D _Tenkoku_SkyTex;
UNITY_LOCATION(1) uniform  sampler2D _Tenkoku_SkyBox;
UNITY_LOCATION(2) uniform  sampler3D _NoiseTex1;
UNITY_LOCATION(3) uniform  sampler3D _NoiseTex2;
UNITY_LOCATION(4) uniform  sampler2D _CloudTex1;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat16_6;
vec4 u_xlat7;
vec4 u_xlat16_7;
vec3 u_xlat8;
vec4 u_xlat16_8;
vec4 u_xlat9;
vec4 u_xlat16_9;
vec3 u_xlat10;
vec4 u_xlat16_10;
vec4 u_xlat11;
vec4 u_xlat16_11;
vec3 u_xlat12;
vec4 u_xlat16_12;
vec3 u_xlat13;
vec4 u_xlat16_13;
vec3 u_xlat14;
vec4 u_xlat16_14;
vec2 u_xlat16;
bool u_xlatb16;
vec3 u_xlat19;
vec3 u_xlat22;
int u_xlati24;
float u_xlat25;
bool u_xlatb25;
vec3 u_xlat26;
float u_xlat28;
vec2 u_xlat31;
int u_xlati31;
bvec2 u_xlatb31;
vec2 u_xlat34;
vec2 u_xlat35;
bool u_xlatb35;
float u_xlat37;
float u_xlat38;
float u_xlat39;
bool u_xlatb39;
float u_xlat40;
int u_xlati40;
bool u_xlatb40;
float u_xlat43;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
int u_xlati46;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
int u_xlati49;
float u_xlat50;
bool u_xlatb50;
float u_xlat51;
bool u_xlatb51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
bool u_xlatb54;
float u_xlat55;
int u_xlati56;
float u_xlat57;
bool u_xlatb57;
void main()
{
    u_xlat0.xyz = max(vs_TEXCOORD2.xyw, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlatb1.xy = equal(vec4(_Tenkoku_UseElek), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    if(u_xlatb1.x){
        u_xlat1.xz = u_xlat0.xy / u_xlat0.zz;
        u_xlat10_2 = texture(_Tenkoku_SkyTex, u_xlat1.xz);
    } else {
        u_xlat16_2.x = float(1.0);
        u_xlat16_2.y = float(1.0);
        u_xlat16_2.z = float(1.0);
    }
    if(u_xlatb1.y){
        u_xlat0.xy = u_xlat0.xy / u_xlat0.zz;
        u_xlat16_2 = texture(_Tenkoku_SkyBox, u_xlat0.xy);
    }
    u_xlat0.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
    u_xlatb45 = (-vs_TEXCOORD1.y)<0.00999999978;
    u_xlatb1.x = 0.0>=_FarDist;
    u_xlatb45 = u_xlatb45 || u_xlatb1.x;
    if(u_xlatb45){
        SV_Target0.xyz = u_xlat0.xyz;
        SV_Target0.w = 0.0;
        return;
    }
    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(vec2(_tenkokuTimer, _tenkokuTimer));
    u_xlat3.xyz = vec3(vec3(_Darkness, _Darkness, _Darkness)) * (-u_xlat0.xyz) + u_xlat0.xyz;
    u_xlat45 = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat1.xy);
    u_xlat45 = sin(u_xlat45);
    u_xlat45 = u_xlat45 * 43758.5469;
    u_xlat45 = fract(u_xlat45);
    u_xlatb31.x = 0.0<_NoiseBias;
    if(u_xlatb31.x){
        u_xlat31.xy = trunc(vec2(_SampleCount1, _SampleCount0));
        u_xlat46 = (-u_xlat31.x) + u_xlat31.y;
        u_xlat31.x = (-vs_TEXCOORD1.y) * u_xlat46 + u_xlat31.x;
        u_xlati46 = int(u_xlat31.x);
        u_xlat47 = _Altitude0 / (-vs_TEXCOORD1.y);
        u_xlat48 = _Altitude1 / (-vs_TEXCOORD1.y);
        u_xlat48 = (-u_xlat47) + u_xlat48;
        u_xlat31.x = trunc(u_xlat31.x);
        u_xlat4.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = u_xlat45 * u_xlat48;
        u_xlat31.x = u_xlat48 / u_xlat31.x;
        u_xlat48 = dot((-vs_TEXCOORD1.xyz), Tenkoku_Vec_SunFwd.xyz);
        u_xlat19.x = (-_HGCoeff) * _HGCoeff + 1.0;
        u_xlat19.x = u_xlat19.x * 0.5;
        u_xlat34.x = _HGCoeff * _HGCoeff + 1.0;
        u_xlat48 = (-_HGCoeff) * u_xlat48 + u_xlat34.x;
        u_xlat48 = u_xlat48 * u_xlat48;
        u_xlat48 = u_xlat19.x / u_xlat48;
        u_xlat19.x = u_xlat48 * 6.0 + -3.0;
        u_xlat19.x = clamp(u_xlat19.x, 0.0, 1.0);
        u_xlat48 = u_xlat48 + u_xlat19.x;
        u_xlat31.x = u_xlat31.x + u_xlat47;
        u_xlat5.xz = _WorldSpaceCameraPos.xz;
        u_xlat5.y = 0.0;
        u_xlat19.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat5.xyz;
        u_xlatb31.x = 0.275000006<_Tenkoku_overcastAmt;
        u_xlati31 = (u_xlatb31.x) ? 4 : u_xlati46;
        u_xlat5.xyz = _Scroll1.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat6.xyz = _Scroll2.xyz * vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer));
        u_xlat46 = _NoiseBias * 2.55000019 + -0.400000006;
        u_xlat47 = (-_Altitude0) + _Altitude1;
        u_xlat7.xy = vec2(u_xlat47) * vec2(0.100000001, 0.400000006);
        u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
        u_xlat50 = float(_SampleCountL);
        u_xlat51 = u_xlat50 * Tenkoku_Vec_SunFwd.y;
        u_xlat37 = _Extinct * -0.75;
        u_xlat8.xyz = u_xlat19.xyz;
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = float(0.0);
        for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<u_xlati31 ; u_xlati_loop_1++)
        {
            u_xlat10.xyz = u_xlat8.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
            u_xlat10.xyz = u_xlat10.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat8.xyz * vec3(_NoiseFreq2);
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat10.xyz = u_xlat10.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat16_10 = textureLod(_NoiseTex1, u_xlat10.xyz, 0.0);
            u_xlat16_11 = textureLod(_NoiseTex2, u_xlat11.xyz, 0.0);
            u_xlat39 = u_xlat16_11.w * _NoiseAmp2;
            u_xlat39 = u_xlat16_10.w * _NoiseAmp1 + u_xlat39;
            u_xlat39 = u_xlat46 + u_xlat39;
            u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
            u_xlat54 = u_xlat8.y + (-_Altitude0);
            u_xlat10.x = u_xlat7.x * u_xlat54;
            u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
            u_xlat25 = u_xlat10.x * -2.0 + 3.0;
            u_xlat10.x = u_xlat10.x * u_xlat10.x;
            u_xlat10.x = u_xlat10.x * u_xlat25;
            u_xlat39 = u_xlat39 * u_xlat10.x;
            u_xlat54 = u_xlat47 + (-u_xlat54);
            u_xlat54 = u_xlat7.y * u_xlat54;
            u_xlat54 = clamp(u_xlat54, 0.0, 1.0);
            u_xlat10.x = u_xlat54 * -2.0 + 3.0;
            u_xlat54 = u_xlat54 * u_xlat54;
            u_xlat54 = u_xlat54 * u_xlat10.x;
            u_xlat39 = u_xlat54 * u_xlat39;
            u_xlatb54 = _Edge<u_xlat39;
            if(u_xlatb54){
                u_xlat54 = u_xlat4.x * u_xlat39;
                u_xlat10.x = float(u_xlati_loop_1);
                u_xlat10.xy = u_xlat1.xy + u_xlat10.xx;
                u_xlat10.x = dot(vec2(vec2(_tenkokuNoiseTimer, _tenkokuNoiseTimer)), u_xlat10.xy);
                u_xlat10.x = sin(u_xlat10.x);
                u_xlat10.x = u_xlat10.x * 43758.5469;
                u_xlat10.x = fract(u_xlat10.x);
                u_xlat54 = u_xlat54 * _Scatter;
                u_xlat54 = u_xlat48 * u_xlat54;
                u_xlat25 = (-u_xlat8.y) + _Altitude1;
                u_xlat40 = u_xlat25 / u_xlat51;
                u_xlat11.xyz = vec3(u_xlat40) * Tenkoku_Vec_SunFwd.xyz;
                u_xlat11.xyz = u_xlat11.xyz * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat11.xyz;
                u_xlat55 = 0.0;
                for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<_SampleCountL ; u_xlati_loop_2++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat55 = u_xlat57 * u_xlat40 + u_xlat55;
                    u_xlat12.xyz = Tenkoku_Vec_SunFwd.xyz * vec3(u_xlat40) + u_xlat12.xyz;
                }
                u_xlatb40 = 0.100000001>=u_xlat55;
                u_xlat40 = (u_xlatb40) ? 0.0 : u_xlat55;
                u_xlat11.x = u_xlat40 * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat40 = u_xlat37 * u_xlat40;
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat40 = (-u_xlat40) + 1.0;
                u_xlat40 = u_xlat40 * u_xlat11.x;
                u_xlat40 = u_xlat54 * u_xlat40;
                u_xlat40 = u_xlat40 * _TenkokuCloudColor.x;
                u_xlat11.x = u_xlat9.x * (-_Extinct);
                u_xlat11.x = u_xlat11.x * 1.44269502;
                u_xlat11.x = exp2(u_xlat11.x);
                u_xlat26.x = u_xlat37 * u_xlat9.x;
                u_xlat26.x = u_xlat26.x * 1.44269502;
                u_xlat26.x = exp2(u_xlat26.x);
                u_xlat26.x = (-u_xlat26.x) + 1.0;
                u_xlat11.x = u_xlat26.x * u_xlat11.x;
                u_xlat52 = u_xlat40 * u_xlat11.x + u_xlat52;
                u_xlat25 = u_xlat25 / u_xlat50;
                u_xlat26.xy = vec2(u_xlat25) * vec2(1.0, 0.0);
                u_xlat26.xyz = u_xlat26.yxy * u_xlat10.xxx + u_xlat8.xyz;
                u_xlat12.xyz = u_xlat26.xyz;
                u_xlat10.x = float(0.0);
                for(int u_xlati_loop_3 = int(0) ; u_xlati_loop_3<_SampleCountL ; u_xlati_loop_3++)
                {
                    u_xlat13.xyz = u_xlat12.xyz * vec3(vec3(_NoiseFreq1, _NoiseFreq1, _NoiseFreq1));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat14.xyz = u_xlat12.xyz * vec3(_NoiseFreq2);
                    u_xlat14.xyz = u_xlat14.xyz * vec3(vec3(_cS, _cS, _cS));
                    u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
                    u_xlat14.xyz = u_xlat14.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
                    u_xlat16_13 = textureLod(_NoiseTex1, u_xlat13.xyz, 0.0);
                    u_xlat16_14 = textureLod(_NoiseTex2, u_xlat14.xyz, 0.0);
                    u_xlat57 = u_xlat16_14.w * _NoiseAmp2;
                    u_xlat57 = u_xlat16_13.w * _NoiseAmp1 + u_xlat57;
                    u_xlat57 = u_xlat46 + u_xlat57;
                    u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
                    u_xlat13.x = u_xlat12.y + (-_Altitude0);
                    u_xlat28 = u_xlat7.x * u_xlat13.x;
                    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
                    u_xlat43 = u_xlat28 * -2.0 + 3.0;
                    u_xlat28 = u_xlat28 * u_xlat28;
                    u_xlat28 = u_xlat28 * u_xlat43;
                    u_xlat57 = u_xlat57 * u_xlat28;
                    u_xlat13.x = u_xlat47 + (-u_xlat13.x);
                    u_xlat13.x = u_xlat7.y * u_xlat13.x;
                    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
                    u_xlat28 = u_xlat13.x * -2.0 + 3.0;
                    u_xlat13.x = u_xlat13.x * u_xlat13.x;
                    u_xlat13.x = u_xlat13.x * u_xlat28;
                    u_xlat57 = u_xlat57 * u_xlat13.x;
                    u_xlat10.x = u_xlat57 * u_xlat25 + u_xlat10.x;
                    u_xlat12.xyz = vec3(u_xlat25) * vec3(0.0, 1.0, 0.0) + u_xlat12.xyz;
                }
                u_xlatb25 = 0.100000001>=u_xlat10.x;
                u_xlat25 = (u_xlatb25) ? 0.0 : u_xlat10.x;
                u_xlat40 = u_xlat25 * (-_Extinct);
                u_xlat40 = u_xlat40 * 1.44269502;
                u_xlat40 = exp2(u_xlat40);
                u_xlat25 = u_xlat37 * u_xlat25;
                u_xlat25 = u_xlat25 * 1.44269502;
                u_xlat25 = exp2(u_xlat25);
                u_xlat25 = (-u_xlat25) + 1.0;
                u_xlat25 = u_xlat25 * u_xlat40;
                u_xlat54 = u_xlat54 * u_xlat25;
                u_xlat53 = u_xlat54 * u_xlat11.x + u_xlat53;
                u_xlat9.x = u_xlat39 * u_xlat4.x + u_xlat9.x;
            }
            u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat8.xyz;
        }
    } else {
        u_xlat52 = u_xlat3.x;
        u_xlat53 = 0.0;
        u_xlat9.x = 0.0;
    }
    u_xlat1.x = u_xlat9.x * 1.25;
    u_xlat1.x = u_xlat1.x * (-_Extinct);
    u_xlat1.x = u_xlat1.x * 1.44269502;
    u_xlat1.x = exp2(u_xlat1.x);
    u_xlat16.x = u_xlat1.x * u_xlat0.x + u_xlat52;
    u_xlatb31.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_NoiseBias2, _NoiseBias3, _NoiseBias2, _NoiseBias3)).xy;
    if(u_xlatb31.x){
        u_xlat4.xy = vec2(_Altitude2, _Altitude3) / (-vs_TEXCOORD1.yy);
        u_xlat31.x = (-u_xlat4.x) + u_xlat4.y;
        u_xlat47 = u_xlat31.x * 0.0500000007;
        u_xlat31.x = u_xlat45 * u_xlat31.x;
        u_xlat31.x = u_xlat31.x * 0.0500000007 + u_xlat4.x;
        u_xlat4.xz = _WorldSpaceCameraPos.xz;
        u_xlat4.y = 0.0;
        u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * u_xlat31.xxx + u_xlat4.xyz;
        u_xlat5.xyz = vec3(vec3(_tenkokuTimer, _tenkokuTimer, _tenkokuTimer)) * vec3(1.39999998, 0.0, 0.349999994);
        u_xlat6.xyz = u_xlat5.xyz * _Scroll1.xyz;
        u_xlat5.xyz = u_xlat5.xyz * _Scroll2.xyz;
        u_xlat7 = vec4(_NoiseBias2) * vec4(1.29999995, 4.9000001, 24.0, 2.5) + vec4(0.200000003, 0.100000001, 20.0, 0.300000012);
        u_xlat31.x = (-_Altitude2) + _Altitude3;
        u_xlat8.xy = u_xlat31.xx * vec2(0.100000001, 0.400000006);
        u_xlat8.xy = vec2(1.0, 1.0) / u_xlat8.xy;
        u_xlat9 = u_xlat6.xzxz * vec4(0.5, 0.5, 0.5, 0.5);
        u_xlat10.xyz = u_xlat4.xyz;
        u_xlat48 = 0.0;
        for(int u_xlati_loop_4 = 0 ; u_xlati_loop_4<4 ; u_xlati_loop_4++)
        {
            u_xlat11.xyz = u_xlat7.xxx * u_xlat10.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat12.xyz = u_xlat7.yyy * u_xlat10.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat13.xyz = u_xlat7.zzz * u_xlat10.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(vec3(_cS, _cS, _cS));
            u_xlat11.xyz = u_xlat11.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat12.xyz = u_xlat12.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat6.xyz;
            u_xlat13.xyz = u_xlat13.xyz * vec3(9.99999975e-06, 9.99999975e-06, 9.99999975e-06) + u_xlat5.xyz;
            u_xlat11.xyz = u_xlat11.xyz * vec3(1.0, 4.0, 1.0);
            u_xlat16_11 = textureLod(_NoiseTex1, u_xlat11.xyz, 0.0);
            u_xlat16_12 = textureLod(_NoiseTex2, u_xlat12.xyz, 0.0);
            u_xlat16_13 = textureLod(_NoiseTex2, u_xlat13.xyz, 0.0);
            u_xlat50 = u_xlat16_13.w * _NoiseAmp2;
            u_xlat50 = u_xlat16_12.w * _NoiseAmp1 + u_xlat50;
            u_xlat50 = (-u_xlat16_11.w) * 0.800000012 + u_xlat50;
            u_xlat50 = u_xlat7.w + u_xlat50;
            u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
            u_xlat51 = u_xlat10.y + (-_Altitude2);
            u_xlat38 = u_xlat8.x * u_xlat51;
            u_xlat38 = clamp(u_xlat38, 0.0, 1.0);
            u_xlat55 = u_xlat38 * -2.0 + 3.0;
            u_xlat38 = u_xlat38 * u_xlat38;
            u_xlat38 = u_xlat38 * u_xlat55;
            u_xlat50 = u_xlat50 * u_xlat38;
            u_xlat51 = u_xlat31.x + (-u_xlat51);
            u_xlat51 = u_xlat8.y * u_xlat51;
            u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
            u_xlat38 = u_xlat51 * -2.0 + 3.0;
            u_xlat51 = u_xlat51 * u_xlat51;
            u_xlat51 = u_xlat51 * u_xlat38;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlat11 = u_xlat10.xzxz * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat9;
            u_xlat16_12 = textureLod(_CloudTex1, u_xlat11.xy, 0.0);
            u_xlat16_11 = textureLod(_CloudTex1, u_xlat11.zw, 0.0);
            u_xlat51 = (-u_xlat16_11.y) + u_xlat16_12.z;
            u_xlat50 = u_xlat50 * u_xlat51;
            u_xlatb51 = _Edge<u_xlat50;
            if(u_xlatb51){
                u_xlat48 = u_xlat50 * u_xlat47 + u_xlat48;
            }
            u_xlat10.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat47) + u_xlat10.xyz;
        }
    } else {
        u_xlat48 = 0.0;
    }
    u_xlat1.z = u_xlat48 * (-_Extinct);
    u_xlat1.xz = u_xlat1.xz * vec2(8.0, 1.44269502);
    u_xlat31.x = exp2(u_xlat1.z);
    u_xlat3.xyz = u_xlat31.xxx * u_xlat0.xyz + u_xlat3.xyz;
    u_xlat47 = _Altitude4 / (-vs_TEXCOORD1.y);
    u_xlat48 = _Altitude5 / (-vs_TEXCOORD1.y);
    u_xlat48 = (-u_xlat47) + u_xlat48;
    u_xlat45 = u_xlat45 * u_xlat48;
    u_xlat45 = u_xlat45 * 0.0199999996 + u_xlat47;
    u_xlat4.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + _WorldSpaceCameraPos.xz;
    if(u_xlatb31.y){
        u_xlat45 = u_xlat48 * 0.0199999996;
        u_xlat34.xy = _Scroll1.xz * vec2(vec2(_tenkokuTimer, _tenkokuTimer));
        u_xlat34.xy = u_xlat34.xy * vec2(0.224999994, 0.0375000015);
        u_xlat46 = _NoiseBias3 * 1.35000002 + -0.100000001;
        u_xlat5.xy = u_xlat4.xy;
        u_xlat47 = 0.0;
        for(int u_xlati_loop_5 = 0 ; u_xlati_loop_5<4 ; u_xlati_loop_5++)
        {
            u_xlat35.xy = u_xlat5.xy * vec2(vec2(_cS, _cS));
            u_xlat6 = u_xlat35.xyxy * vec4(2.99999992e-05, 2.99999992e-05, 1.99999995e-05, 1.99999995e-05) + u_xlat34.xyxy;
            u_xlat35.xy = u_xlat35.xy * vec2(9.99999975e-06, 9.99999975e-06) + u_xlat34.xy;
            u_xlat16_7 = textureLod(_CloudTex1, u_xlat6.xy, 0.0);
            u_xlat16_6 = textureLod(_CloudTex1, u_xlat6.zw, 0.0);
            u_xlat16_9 = textureLod(_CloudTex1, u_xlat35.xy, 0.0);
            u_xlat35.x = u_xlat16_6.y + u_xlat16_9.w;
            u_xlat35.x = (-u_xlat16_7.z) * 1.20000005 + u_xlat35.x;
            u_xlat35.x = u_xlat46 + u_xlat35.x;
            u_xlat35.x = clamp(u_xlat35.x, 0.0, 1.0);
            u_xlat47 = u_xlat35.x * u_xlat45 + u_xlat47;
            u_xlat5.xy = (-vs_TEXCOORD1.xz) * vec2(u_xlat45) + u_xlat5.xy;
        }
    } else {
        u_xlat47 = 0.0;
    }
    u_xlat45 = u_xlat47 * (-_Extinct);
    u_xlat45 = u_xlat45 * 2.88539004;
    u_xlat45 = exp2(u_xlat45);
    u_xlat46 = dot((-vs_TEXCOORD1.xyz), (-vs_TEXCOORD1.xyz));
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * (-vs_TEXCOORD1.xyz);
    u_xlat47 = dot(u_xlat5.xyz, Tenkoku_Vec_SunFwd.xyz);
    u_xlat48 = dot(u_xlat5.xyz, Tenkoku_Vec_MoonFwd.xyz);
    u_xlat34.x = u_xlat47 * 2.0 + -0.75;
    u_xlat34.x = clamp(u_xlat34.x, 0.0, 1.0);
    u_xlat49 = u_xlat47 * 10.0 + -8.75;
    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);
    u_xlat47 = u_xlat47 + 0.899999976;
    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
    u_xlat6.xyz = vec3(u_xlat48) + vec3(-0.400000006, -0.100000001, -0.00999999978);
    u_xlat6.xyz = u_xlat6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
    u_xlat48 = max(_TenkokuSunColor.y, _TenkokuSunColor.x);
    u_xlat48 = max(u_xlat48, _TenkokuSunColor.z);
    u_xlat48 = (-u_xlat48) + 1.0;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat7.xy = vec2(vec2(_NoiseBias, _NoiseBias)) * vec2(-0.150000036, -0.299999982) + vec2(0.600000024, 0.699999988);
    u_xlat8.xyz = u_xlat7.xxx * _TenkokuCloudColor.xyz;
    u_xlat9.xyz = (-_TenkokuCloudColor.xyz) * u_xlat7.xxx + _TenkokuCloudColor.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat8.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat8.xyz * _Tenkoku_overcastColor.xyz + (-u_xlat8.xyz);
    u_xlat8.xyz = vec3(_Tenkoku_overcastAmt) * u_xlat9.xyz + u_xlat8.xyz;
    u_xlat9.xyz = vec3(u_xlat53) * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat1.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.yyy * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat8.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat8.xyz;
    u_xlat9.xyz = u_xlat7.yyy * u_xlat8.xyz;
    u_xlat22.xyz = (-u_xlat8.xyz) * u_xlat7.yyy + u_xlat8.xyz;
    u_xlat22.xyz = vec3(u_xlat53) * u_xlat22.xyz + u_xlat9.xyz;
    u_xlat8.xyz = _TenkokuCloudAmbientColor.xyz * vec3(_Tenkoku_Ambient);
    u_xlat9.xyz = u_xlat8.xyz * vec3(0.5, 0.5, 0.5);
    u_xlat16.x = (-u_xlat47) + u_xlat53;
    u_xlat16.x = u_xlat16.x + 1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat8.xyz = (-u_xlat8.xyz) * vec3(0.5, 0.5, 0.5) + u_xlat22.xyz;
    u_xlat8.xyz = u_xlat16.xxx * u_xlat8.xyz + u_xlat9.xyz;
    u_xlat22.xyz = u_xlat22.xyz + (-u_xlat8.xyz);
    u_xlat22.xyz = vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) * u_xlat22.xyz + u_xlat8.xyz;
    u_xlat8.xyz = u_xlat22.xyz * vec3(1.39999998, 1.39999998, 1.39999998);
    u_xlat16.x = _TenkokuCloudAmbientColor.w * -0.300000012 + 1.0;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.5, 2.5, 2.5) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI));
    u_xlat9.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat1.y = u_xlat31.x * u_xlat34.x;
    u_xlat1.xy = u_xlat1.xy * vec2(3.0, 1.5);
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(2.20000005, 2.20000005, 2.20000005) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat1.yyy * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat16.x = u_xlat31.x * u_xlat49;
    u_xlat9.xyz = _TenkokuCloudAmbientColor.xyz * vec3(5.4000001, 5.4000001, 5.4000001) + (-u_xlat3.xyz);
    u_xlat3.xyz = u_xlat16.xxx * u_xlat9.xyz + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat31.xxx * Tenkoku_MoonLightColor.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat3.xyz = u_xlat9.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
    u_xlat9.xyz = u_xlat3.xyz * vec3(1.20000005, 1.20000005, 1.20000005);
    u_xlat10.xyz = vec3(u_xlat45) * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyw = u_xlat6.yyy * u_xlat10.xyz;
    u_xlat6.xyw = vec3(u_xlat48) * u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(0.100000001, 0.100000001, 0.100000001);
    u_xlat6.xyw = _TenkokuCloudAmbientColor.xyz * vec3(vec3(_Tenkoku_AmbientGI, _Tenkoku_AmbientGI, _Tenkoku_AmbientGI)) + u_xlat6.xyw;
    u_xlat6.xyw = u_xlat6.xyw * vec3(2.4000001, 2.4000001, 2.4000001);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat16.x = u_xlat31.x * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat45 = min(u_xlat45, 1.0);
    u_xlat10.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat6.xyw);
    u_xlat6.xyw = vec3(u_xlat45) * u_xlat10.xyz + u_xlat6.xyw;
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(1.20000005, 1.20000005, 1.20000005) + u_xlat6.xyw;
    u_xlat3.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat9.xyz;
    u_xlat3.xyz = (-u_xlat22.xyz) * vec3(1.39999998, 1.39999998, 1.39999998) + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz + u_xlat8.xyz;
    u_xlat31.x = (-_NoiseBias3) + 1.0;
    u_xlat47 = (-u_xlat1.x) + 1.0;
    u_xlat47 = (-u_xlat31.x) + u_xlat47;
    u_xlat31.x = _NoiseBias3 * u_xlat47 + u_xlat31.x;
    u_xlat45 = u_xlat45 + u_xlat31.x;
    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
    u_xlat45 = u_xlat45 + -0.100000001;
    u_xlat45 = u_xlat16.x * u_xlat45 + 0.100000001;
    u_xlat16.xy = u_xlat4.xy * vec2(vec2(_cS, _cS));
    u_xlat4.xy = vec2(_Tenkoku_overcastAmt, _tenkokuTimer) + vec2(_Tenkoku_overcastAmt, _tenkokuTimer);
    u_xlat19.xy = u_xlat4.yy * _Scroll1.xz;
    u_xlat16.xy = u_xlat16.xy * vec2(2.99999992e-05, 2.99999992e-05) + u_xlat19.xy;
    u_xlat16_8 = textureLod(_CloudTex1, u_xlat16.xy, 0.0);
    u_xlat16.x = max(_TenkokuCloudColor.y, _TenkokuCloudColor.x);
    u_xlat16.x = max(u_xlat16.x, _TenkokuCloudColor.z);
    u_xlat19.xyz = u_xlat16.xxx + (-_TenkokuCloudColor.xyz);
    u_xlat19.xyz = u_xlat19.xyz * vec3(0.649999976, 0.649999976, 0.649999976) + _TenkokuCloudColor.xyz;
    u_xlat6.xyw = u_xlat7.xxx * u_xlat19.xyz;
    u_xlat8.x = u_xlat16_8.x;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat19.xyz = (-u_xlat19.xyz) * u_xlat7.xxx + u_xlat19.xyz;
    u_xlat19.xyz = u_xlat8.xxx * u_xlat19.xyz + u_xlat6.xyw;
    u_xlat16.x = _Tenkoku_overcastAmt * -0.5 + 1.0;
    u_xlat6.xyw = u_xlat19.xyz * _Tenkoku_overcastColor.xyz;
    u_xlat4.x = u_xlat4.x;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat6.xyw * u_xlat16.xxx + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat4.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat16.x = 1900.0 / (-vs_TEXCOORD1.y);
    u_xlat16.x = u_xlat16.x / _FarDist;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat6.xyw = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat19.xyz);
    u_xlat19.xyz = u_xlat16.xxx * u_xlat6.xyw + u_xlat19.xyz;
    u_xlat6.xyz = u_xlat6.zzz * Tenkoku_MoonLightColor.xyz;
    u_xlat6.xyz = vec3(u_xlat48) * u_xlat6.xyz;
    u_xlat19.xyz = u_xlat6.xyz * vec3(0.0149999997, 0.0149999997, 0.0149999997) + u_xlat19.xyz;
    u_xlat19.xyz = (-u_xlat3.xyz) + u_xlat19.xyz;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat19.xyz + u_xlat3.xyz;
    u_xlatb16 = 0.0<Tenkoku_LightningLightIntensity;
    u_xlat31.x = dot(Tenkoku_Vec_LightningFwd.xyz, u_xlat5.xyz);
    u_xlat31.x = clamp(u_xlat31.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat31.xxx + vec3(-0.300000012, -0.649999976, -0.999899983);
    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat5.xyz = vec3(Tenkoku_LightningLightIntensity) * Tenkoku_LightningColor.xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(0.25, 0.25, 0.25) + u_xlat3.xyz;
    u_xlat4.xy = u_xlat4.xy * vec2(0.25, 0.5);
    u_xlat31.x = u_xlat4.y + u_xlat4.x;
    u_xlat31.x = u_xlat4.z * 3000.0 + u_xlat31.x;
    u_xlat4.xyz = u_xlat31.xxx * Tenkoku_LightningColor.xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(Tenkoku_LightningLightIntensity) + u_xlat5.xyz;
    u_xlat3.xyz = (bool(u_xlatb16)) ? u_xlat4.xyz : u_xlat3.xyz;
    u_xlat16.x = (-vs_TEXCOORD1.y) * u_xlat46 + -0.0250000004;
    u_xlat16.x = u_xlat16.x * 3.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat3.xyz = (-u_xlat10_2.xyz) * vec3(0.800000012, 0.800000012, 0.800000012) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat16.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16.x = _humid * 2.0 + -1.0;
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat10_2.xyz * vec3(0.800000012, 0.800000012, 0.800000012) + (-u_xlat0.xyz);
    u_xlat0.xyz = u_xlat16.xxx * u_xlat2.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * vec3(1.25, 1.25, 1.25);
    SV_Target0.w = (-u_xlat1.x) * u_xlat45 + 1.0;
    return;
}
-------- failed compiling:
fragment evaluation shader
GLSL compilation failed for shader TENKOKU/cloud_sphere:
0(149) : error C1503: undefined variable "u_xlat10_2"
0(159) : error C1503: undefined variable "u_xlat10_2"
0(531) : error C1503: undefined variable "u_xlat10_2"
0(555) : error C1503: undefined variable "u_xlat10_2"
0(592) : error C1503: undefined variable "u_xlat10_2"
0(615) : error C1503: undefined variable "u_xlat10_2"
0(619) : error C1503: undefined variable "u_xlat10_2"
Note: Creation of internal variant of shader 'TENKOKU/cloud_sphere' failed.
Refreshing native plugins compatible for Editor in 3.22 ms, found 0 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 55 Unused Serialized files (Serialized files now loaded: 0)
Unloading 55 unused Assets / (13.2 MB). Loaded Objects now: 5517.
Memory consumption went from 282.5 MB to 269.3 MB.
Total: 6.071517 ms (FindLiveObjects: 0.386745 ms CreateObjectMapping: 0.277525 ms MarkObjects: 3.061803 ms  DeleteObjects: 2.344824 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:srp/default-pipeline: 3ae1f9f9c9d9b44992ded021432e1230 -> 91ab147d0c20c643953dc7f29ec0550a
